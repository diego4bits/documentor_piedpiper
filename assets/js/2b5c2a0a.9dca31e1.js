"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1267],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>_});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=a(e,["components","mdxType","originalType","parentName"]),d=c(n),f=i,_=d["".concat(l,".").concat(f)]||d[f]||u[f]||o;return n?r.createElement(_,s(s({ref:t},p),{},{components:n})):r.createElement(_,s({ref:t},p))}));function _(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=f;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[d]="string"==typeof e?e:i,s[1]=a;for(var c=2;c<o;c++)s[c]=n[c];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4039:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={},s=void 0,a={unversionedId:"docs/src/tree_sitter_logic/tree_sitter_util/d__recursive_get_nodes",id:"docs/src/tree_sitter_logic/tree_sitter_util/d__recursive_get_nodes",title:"d__recursive_get_nodes",description:"recursiveget_nodes",source:"@site/docs/docs/src/tree_sitter_logic/tree_sitter_util/d__recursive_get_nodes.md",sourceDirName:"docs/src/tree_sitter_logic/tree_sitter_util",slug:"/docs/src/tree_sitter_logic/tree_sitter_util/d__recursive_get_nodes",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d__recursive_get_nodes",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d__get_class_implementation",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d__get_class_implementation"},next:{title:"d_get_dependencies",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_dependencies"}},l={},c=[{value:"<code>_recursive_get_nodes</code>",id:"_recursive_get_nodes",level:2},{value:"Description:",id:"description",level:4},{value:"Important info:",id:"important-info",level:4},{value:"Usage:",id:"usage",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"_recursive_get_nodes"},(0,i.kt)("inlineCode",{parentName:"h2"},"_recursive_get_nodes")),(0,i.kt)("h4",{id:"description"},"Description:"),(0,i.kt)("p",null,"This code snippet performs a recursive traversal of a tree structure represented by a given parent node and returns a list of all the nodes that match a set of specified types. It is typically used for extracting specific nodes from a tree structure."),(0,i.kt)("h4",{id:"important-info"},"Important info:"),(0,i.kt)("p",null,"This function relies on the ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeInfo")," class from the ",(0,i.kt)("inlineCode",{parentName:"p"},"snippet_management.node_info")," module and the ",(0,i.kt)("inlineCode",{parentName:"p"},"Node")," class from the ",(0,i.kt)("inlineCode",{parentName:"p"},"tree_sitter")," module."),(0,i.kt)("h4",{id:"usage"},"Usage:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This code snippet is used for extracting nodes of specific types from a tree structure."),(0,i.kt)("li",{parentName:"ul"},"This code snippet is used for filtering out nodes based on their types."),(0,i.kt)("li",{parentName:"ul"},"This code snippet is used for performing a recursive traversal of a tree structure.")),(0,i.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,i.kt)("p",null,"The function takes in a ",(0,i.kt)("inlineCode",{parentName:"p"},"parent_node_info")," object, which represents the parent node of the tree structure, a set of ",(0,i.kt)("inlineCode",{parentName:"p"},"types")," indicating the specific types of nodes to be extracted, and a ",(0,i.kt)("inlineCode",{parentName:"p"},"file_str")," string representing the tree structure."),(0,i.kt)("p",null,"The function initializes an empty list called ",(0,i.kt)("inlineCode",{parentName:"p"},"nodes_list")," to store the matching nodes."),(0,i.kt)("p",null,"It then iterates over the ",(0,i.kt)("inlineCode",{parentName:"p"},"children")," of the ",(0,i.kt)("inlineCode",{parentName:"p"},"parent_node_info"),". For each child, it creates a ",(0,i.kt)("inlineCode",{parentName:"p"},"child_node_info")," object using the ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeInfo")," class, passing in the child, the parent node info, and the file string."),(0,i.kt)("p",null,"The function then recursively calls itself, passing in the ",(0,i.kt)("inlineCode",{parentName:"p"},"child_node_info"),", types, and file string. This recursive call returns a list of nodes that match the specified types."),(0,i.kt)("p",null,"The function extends the ",(0,i.kt)("inlineCode",{parentName:"p"},"nodes_list")," with the child nodes returned by the recursive call."),(0,i.kt)("p",null,"If the type of the current child node matches one of the specified types, the function appends the ",(0,i.kt)("inlineCode",{parentName:"p"},"child_node_info")," to the ",(0,i.kt)("inlineCode",{parentName:"p"},"nodes_list"),"."),(0,i.kt)("p",null,"Finally, the function returns the ",(0,i.kt)("inlineCode",{parentName:"p"},"nodes_list")," containing all the matching nodes."),(0,i.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NodeInfo"),": Represents information about a node in a tree structure. It is imported from the ",(0,i.kt)("inlineCode",{parentName:"li"},"snippet_management.node_info")," module."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Node"),": Represents a node in a tree structure. It is imported from the ",(0,i.kt)("inlineCode",{parentName:"li"},"tree_sitter")," module.")))}u.isMDXComponent=!0}}]);