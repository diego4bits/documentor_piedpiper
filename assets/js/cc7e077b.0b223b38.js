"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8146],{3905:(e,t,i)=>{i.d(t,{Zo:()=>l,kt:()=>f});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function d(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},l=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",_={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),c=s(i),m=a,f=c["".concat(p,".").concat(m)]||c[m]||_[m]||r;return i?n.createElement(f,o(o({ref:t},l),{},{components:i})):n.createElement(f,o({ref:t},l))}));function f(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,o=new Array(r);o[0]=m;var d={};for(var p in t)hasOwnProperty.call(t,p)&&(d[p]=t[p]);d.originalType=e,d[c]="string"==typeof e?e:a,o[1]=d;for(var s=2;s<r;s++)o[s]=i[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}m.displayName="MDXCreateElement"},152:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>_,frontMatter:()=>r,metadata:()=>d,toc:()=>s});var n=i(7462),a=(i(7294),i(3905));const r={},o=void 0,d={unversionedId:"docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_modified_snippets_dict",id:"docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_modified_snippets_dict",title:"d__update_modified_snippets_dict",description:"updatemodifiedsnippetsdict() -> None",source:"@site/docs/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_modified_snippets_dict.md",sourceDirName:"docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager",slug:"/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_modified_snippets_dict",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_modified_snippets_dict",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d__update_all_snippets_dict",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_all_snippets_dict"},next:{title:"d__update_new_added_snippets_dict",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_new_added_snippets_dict"}},p={},s=[{value:"<code>_update_modified_snippets_dict() -&gt; None</code>",id:"_update_modified_snippets_dict---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],l={toc:s},c="wrapper";function _(e){let{components:t,...i}=e;return(0,a.kt)(c,(0,n.Z)({},l,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"_update_modified_snippets_dict---none"},(0,a.kt)("inlineCode",{parentName:"h2"},"_update_modified_snippets_dict() -> None")),(0,a.kt)("h4",{id:"description"},"Description:"),(0,a.kt)("p",null,"This method updates the ",(0,a.kt)("inlineCode",{parentName:"p"},"_modified_snippets_dict")," attribute of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ModifiedFilesManager")," class by comparing the snippets stored in two file scrappers (",(0,a.kt)("inlineCode",{parentName:"p"},"_file_scrapper_front")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"_file_scrapper_tail"),"). It checks for snippets with the same hash integer in both scrappers and adds them to the ",(0,a.kt)("inlineCode",{parentName:"p"},"_modified_snippets_dict")," if their implementations are different."),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("p",null,"This method does not have any parameters."),(0,a.kt)("h4",{id:"returns"},"Returns:"),(0,a.kt)("p",null,"This method does not return any value."),(0,a.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,a.kt)("p",null,"This method does not throw any exceptions."),(0,a.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Updating the modified snippets dictionary\nmodified_files_manager._update_modified_snippets_dict()\n\n# Printing the modified snippets dictionary\nprint(modified_files_manager._modified_snippets_dict)\n")),(0,a.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Get the keys of the snippets stored in the ",(0,a.kt)("inlineCode",{parentName:"li"},"_file_scrapper_front")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"_file_scrapper_tail")," and store them in ",(0,a.kt)("inlineCode",{parentName:"li"},"front_snippets_keys")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"tail_snippets_keys")," respectively."),(0,a.kt)("li",{parentName:"ol"},"Find the intersection of ",(0,a.kt)("inlineCode",{parentName:"li"},"front_snippets_keys")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"tail_snippets_keys")," and store the result in ",(0,a.kt)("inlineCode",{parentName:"li"},"modified_snippets_hash_ints"),"."),(0,a.kt)("li",{parentName:"ol"},"Create an empty dictionary called ",(0,a.kt)("inlineCode",{parentName:"li"},"modified_snippets_dict"),"."),(0,a.kt)("li",{parentName:"ol"},"Iterate over each ",(0,a.kt)("inlineCode",{parentName:"li"},"hash_int")," in ",(0,a.kt)("inlineCode",{parentName:"li"},"modified_snippets_hash_ints"),"."),(0,a.kt)("li",{parentName:"ol"},"Get the front snippet from ",(0,a.kt)("inlineCode",{parentName:"li"},"_file_scrapper_front")," using ",(0,a.kt)("inlineCode",{parentName:"li"},"hash_int")," and store it in ",(0,a.kt)("inlineCode",{parentName:"li"},"front_snippet"),"."),(0,a.kt)("li",{parentName:"ol"},"Get the tail snippet from ",(0,a.kt)("inlineCode",{parentName:"li"},"_file_scrapper_tail")," using ",(0,a.kt)("inlineCode",{parentName:"li"},"hash_int")," and store it in ",(0,a.kt)("inlineCode",{parentName:"li"},"tail_snippet"),"."),(0,a.kt)("li",{parentName:"ol"},"If the implementation of ",(0,a.kt)("inlineCode",{parentName:"li"},"front_snippet")," is different from the implementation of ",(0,a.kt)("inlineCode",{parentName:"li"},"tail_snippet"),", add ",(0,a.kt)("inlineCode",{parentName:"li"},"front_snippet")," to ",(0,a.kt)("inlineCode",{parentName:"li"},"modified_snippets_dict")," with ",(0,a.kt)("inlineCode",{parentName:"li"},"hash_int")," as the key."),(0,a.kt)("li",{parentName:"ol"},"Set the ",(0,a.kt)("inlineCode",{parentName:"li"},"_modified_snippets_dict")," attribute of the ",(0,a.kt)("inlineCode",{parentName:"li"},"ModifiedFilesManager")," instance to ",(0,a.kt)("inlineCode",{parentName:"li"},"modified_snippets_dict"),".")),(0,a.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FileScrapper"),": Used to access the snippets stored in ",(0,a.kt)("inlineCode",{parentName:"li"},"_file_scrapper_front")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"_file_scrapper_tail"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"CodeSnippet"),": Represents a code snippet and is used to compare the implementations of the front and tail snippets.")))}_.isMDXComponent=!0}}]);