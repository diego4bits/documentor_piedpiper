"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2084],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},m=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),d=l(r),u=i,g=d["".concat(s,".").concat(u)]||d[u]||p[u]||o;return r?n.createElement(g,a(a({ref:t},m),{},{components:r})):n.createElement(g,a({ref:t},m))}));function g(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,a=new Array(o);a[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[d]="string"==typeof e?e:i,a[1]=c;for(var l=2;l<o;l++)a[l]=r[l];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8461:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var n=r(7462),i=(r(7294),r(3905));const o={},a=void 0,c={unversionedId:"docs/src/git_tools/git_manager/GitManager/d_selected_commit",id:"docs/src/git_tools/git_manager/GitManager/d_selected_commit",title:"d_selected_commit",description:"selected_commit() -> Commit",source:"@site/docs/docs/src/git_tools/git_manager/GitManager/d_selected_commit.md",sourceDirName:"docs/src/git_tools/git_manager/GitManager",slug:"/docs/src/git_tools/git_manager/GitManager/d_selected_commit",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/d_selected_commit",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_select_tail_commit",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/d_select_tail_commit"},next:{title:"d_selected_commit_tree",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/d_selected_commit_tree"}},s={},l=[{value:"<code>selected_commit() -&gt; Commit</code>",id:"selected_commit---commit",level:2},{value:"Description:",id:"description",level:4},{value:"Returns:",id:"returns",level:4},{value:"Dependencies:",id:"dependencies",level:4},{value:"Usage Cases:",id:"usage-cases",level:4}],m={toc:l},d="wrapper";function p(e){let{components:t,...r}=e;return(0,i.kt)(d,(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"selected_commit---commit"},(0,i.kt)("inlineCode",{parentName:"h2"},"selected_commit() -> Commit")),(0,i.kt)("h4",{id:"description"},"Description:"),(0,i.kt)("p",null,"This method returns the selected commit and is used to retrieve the selected commit from the GitManager class."),(0,i.kt)("h4",{id:"returns"},"Returns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Commit"),": The selected commit from the GitManager instance.")),(0,i.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GitManager"),": The class to which this method belongs.")),(0,i.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\ncommit = selected_commit()\nprint(commit)\n")))}p.isMDXComponent=!0}}]);