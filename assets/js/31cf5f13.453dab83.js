"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1677],{3905:(e,t,i)=>{i.d(t,{Zo:()=>m,kt:()=>h});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var p=n.createContext({}),s=function(e){var t=n.useContext(p),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},m=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=s(i),u=r,h=c["".concat(p,".").concat(u)]||c[u]||d[u]||a;return i?n.createElement(h,o(o({ref:t},m),{},{components:i})):n.createElement(h,o({ref:t},m))}));function h(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=i[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},8629:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=i(7462),r=(i(7294),i(3905));const a={},o=void 0,l={unversionedId:"docs/src/git_tools/git_manager/GitManager/d___init__",id:"docs/src/git_tools/git_manager/GitManager/d___init__",title:"d___init__",description:"init(repo_path: Path = Path.cwd())",source:"@site/docs/docs/src/git_tools/git_manager/GitManager/d___init__.md",sourceDirName:"docs/src/git_tools/git_manager/GitManager",slug:"/docs/src/git_tools/git_manager/GitManager/d___init__",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/d___init__",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"commit_doc_changes",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/commit_doc_changes"},next:{title:"d__commit",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/d__commit"}},p={},s=[{value:"<code>__init__(repo_path: Path = Path.cwd())</code>",id:"__init__repo_path-path--pathcwd",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],m={toc:s},c="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(c,(0,n.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"__init__repo_path-path--pathcwd"},(0,r.kt)("inlineCode",{parentName:"h2"},"__init__(repo_path: Path = Path.cwd())")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This method initializes an instance of the GitManager class. It sets up the necessary attributes for managing a Git repository. "),(0,r.kt)("h4",{id:"parameters"},"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"repo_path")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Path"),"): The path to the Git repository. If not provided, the current working directory is used.")),(0,r.kt)("h4",{id:"returns"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"None")),(0,r.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Exception"),": This exception is raised if there is no head parent commit in the repository.")),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Initialize GitManager with default repository path\ngit_manager = GitManager()\nprint(git_manager)\n\n# Initialize GitManager with custom repository path\ngit_manager = GitManager(Path('/path/to/repository'))\nprint(git_manager)\n")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The method takes an optional parameter ",(0,r.kt)("inlineCode",{parentName:"li"},"repo_path")," which represents the path to the Git repository. If the ",(0,r.kt)("inlineCode",{parentName:"li"},"repo_path")," is not provided, it sets the ",(0,r.kt)("inlineCode",{parentName:"li"},"repo_path")," to the current working directory."),(0,r.kt)("li",{parentName:"ul"},"It initializes the ",(0,r.kt)("inlineCode",{parentName:"li"},"project_repo")," attribute with the Git repository at the specified ",(0,r.kt)("inlineCode",{parentName:"li"},"repo_path"),"."),(0,r.kt)("li",{parentName:"ul"},"It retrieves the head commit using ",(0,r.kt)("inlineCode",{parentName:"li"},"self.project_repo.head.peel(Commit)")," and assigns it to the ",(0,r.kt)("inlineCode",{parentName:"li"},"head_commit")," attribute."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"front_commit")," attribute is set to the same value as ",(0,r.kt)("inlineCode",{parentName:"li"},"head_commit"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"front_commit_tree")," attribute is set to the tree of ",(0,r.kt)("inlineCode",{parentName:"li"},"front_commit"),"."),(0,r.kt)("li",{parentName:"ul"},"If the ",(0,r.kt)("inlineCode",{parentName:"li"},"head_commit")," has a parent commit, the ",(0,r.kt)("inlineCode",{parentName:"li"},"tail_commit")," attribute is set to the parent commit. Otherwise, it raises an exception indicating that there is no head parent commit."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"tail_commit_tree")," attribute is set to the tree of ",(0,r.kt)("inlineCode",{parentName:"li"},"tail_commit"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"selected_commit")," attribute is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"tail_commit"),"."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"selected_commit_tree")," attribute is set to ",(0,r.kt)("inlineCode",{parentName:"li"},"tail_commit_tree"),".")),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Path")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"pathlib"),": Represents a path in the file system."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Repository"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Commit"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Tree")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"pygit2"),": Provides Git repository management functionality."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ClassVar"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"List")," from ",(0,r.kt)("inlineCode",{parentName:"li"},"typing"),": Used for type hints.")))}d.isMDXComponent=!0}}]);