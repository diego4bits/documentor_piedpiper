"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1017],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>f});var r=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)i=a[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(i),h=n,f=u["".concat(s,".").concat(h)]||u[h]||d[h]||a;return i?r.createElement(f,o(o({ref:t},p),{},{components:i})):r.createElement(f,o({ref:t},p))}));function f(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=i.length,o=new Array(a);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var c=2;c<a;c++)o[c]=i[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,i)}h.displayName="MDXCreateElement"},7793:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=i(7462),n=(i(7294),i(3905));const a={},o=void 0,l={unversionedId:"docs/src/git_tools/git_retrieaver/GitRetrieaver/get_file_git_object",id:"docs/src/git_tools/git_retrieaver/GitRetrieaver/get_file_git_object",title:"get_file_git_object",description:"getfilegitobject(filepath: Path) -> Blob",source:"@site/docs/docs/src/git_tools/git_retrieaver/GitRetrieaver/get_file_git_object.md",sourceDirName:"docs/src/git_tools/git_retrieaver/GitRetrieaver",slug:"/docs/src/git_tools/git_retrieaver/GitRetrieaver/get_file_git_object",permalink:"/documentor_piedpiper/docs/src/git_tools/git_retrieaver/GitRetrieaver/get_file_git_object",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_retrieve_file",permalink:"/documentor_piedpiper/docs/src/git_tools/git_retrieaver/GitRetrieaver/d_retrieve_file"},next:{title:"retrieve_file",permalink:"/documentor_piedpiper/docs/src/git_tools/git_retrieaver/GitRetrieaver/retrieve_file"}},s={},c=[{value:"<code>get_file_git_object(file_path: Path) -&gt; Blob</code>",id:"get_file_git_objectfile_path-path---blob",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],p={toc:c},u="wrapper";function d(e){let{components:t,...i}=e;return(0,n.kt)(u,(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"get_file_git_objectfile_path-path---blob"},(0,n.kt)("inlineCode",{parentName:"h2"},"get_file_git_object(file_path: Path) -> Blob")),(0,n.kt)("h4",{id:"description"},"Description:"),(0,n.kt)("p",null,"This method retrieves a git object for a given file path. It belongs to the class ",(0,n.kt)("inlineCode",{parentName:"p"},"GitRetriaver"),"."),(0,n.kt)("h4",{id:"parameters"},"Parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"file_path")," (",(0,n.kt)("inlineCode",{parentName:"li"},"Path"),"): The path of the file for which the git object needs to be retrieved.")),(0,n.kt)("h4",{id:"returns"},"Returns:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Blob"),": The git object (Blob) corresponding to the given file path.")),(0,n.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Exception"),": This exception is thrown when no object is found in the git tree for the given file path.")),(0,n.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nresult_case1 = get_file_git_object(file_path)\nprint(result_case1)\n\n# Another use case (if applicable)\nresult_case2 = get_file_git_object(file_path)\nprint(result_case2)\n")),(0,n.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},'The method starts by splitting the given file path using "',"\\",'" as a delimiter and storing it in the ',(0,n.kt)("inlineCode",{parentName:"li"},"path_way")," variable."),(0,n.kt)("li",{parentName:"ul"},"It then retrieves the current git commit tree using the ",(0,n.kt)("inlineCode",{parentName:"li"},"selected_commit_tree()")," method from the ",(0,n.kt)("inlineCode",{parentName:"li"},"GitManager")," class."),(0,n.kt)("li",{parentName:"ul"},"The method iterates over each path in ",(0,n.kt)("inlineCode",{parentName:"li"},"path_way")," and checks if it exists in the current object."),(0,n.kt)("li",{parentName:"ul"},"If the path exists, it updates the current object to the corresponding sub-object."),(0,n.kt)("li",{parentName:"ul"},"If the path does not exist, it throws an exception indicating that no object is found in the git tree for the given file path."),(0,n.kt)("li",{parentName:"ul"},"Finally, it returns the current object, which represents the git object (Blob) for the given file path.")),(0,n.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"GitManager"),": This class is used to retrieve the current git commit tree."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Path"),": This class is used to represent the file path.")))}d.isMDXComponent=!0}}]);