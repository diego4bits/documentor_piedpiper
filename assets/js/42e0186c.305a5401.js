"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3736],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>f});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},h=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(i),h=r,f=p["".concat(c,".").concat(h)]||p[h]||u[h]||a;return i?n.createElement(f,o(o({ref:t},d),{},{components:i})):n.createElement(f,o({ref:t},d))}));function f(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<a;s++)o[s]=i[s];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}h.displayName="MDXCreateElement"},8808:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var n=i(7462),r=(i(7294),i(3905));const a={},o=void 0,l={unversionedId:"docs/src/git_tools/git_file_checker/GitFileChecker/d_update_changed_files",id:"docs/src/git_tools/git_file_checker/GitFileChecker/d_update_changed_files",title:"d_update_changed_files",description:"updatechangedfiles() -> None",source:"@site/docs/docs/src/git_tools/git_file_checker/GitFileChecker/d_update_changed_files.md",sourceDirName:"docs/src/git_tools/git_file_checker/GitFileChecker",slug:"/docs/src/git_tools/git_file_checker/GitFileChecker/d_update_changed_files",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/GitFileChecker/d_update_changed_files",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d__get_diff",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/GitFileChecker/d__get_diff"},next:{title:"update_changed_files",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/GitFileChecker/update_changed_files"}},c={},s=[{value:"<code>update_changed_files() -&gt; None</code>",id:"update_changed_files---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],d={toc:s},p="wrapper";function u(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"update_changed_files---none"},(0,r.kt)("inlineCode",{parentName:"h2"},"update_changed_files() -> None")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This method performs the update of the changed files in the repository. It belongs to the class ",(0,r.kt)("inlineCode",{parentName:"p"},"GitFileChecker")," and is used to track the changes made to the files in the Git repository."),(0,r.kt)("h4",{id:"parameters"},"Parameters:"),(0,r.kt)("p",null,"This method does not take any parameters."),(0,r.kt)("h4",{id:"returns"},"Returns:"),(0,r.kt)("p",null,"This method does not return any value."),(0,r.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,r.kt)("p",null,"This method does not throw any exceptions."),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nupdate_changed_files()\n")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The method first obtains the tail commit and front commit using the ",(0,r.kt)("inlineCode",{parentName:"li"},"GitManager.tail_commit()")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"GitManager.front_commit()")," methods, respectively."),(0,r.kt)("li",{parentName:"ul"},"Then, it assigns the difference between the tail commit and the front commit to the ",(0,r.kt)("inlineCode",{parentName:"li"},"GitFileChecker.files_diff")," attribute using the ",(0,r.kt)("inlineCode",{parentName:"li"},"_get_diff()")," method."),(0,r.kt)("li",{parentName:"ul"},"Finally, it extracts the changes made to the files using the ",(0,r.kt)("inlineCode",{parentName:"li"},"_extract_changes()")," method.")),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GitManager"),": This class is required to obtain the tail commit and front commit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GitFileChecker"),": This class is required to store the files difference and extract the changes made to the files.")))}u.isMDXComponent=!0}}]);