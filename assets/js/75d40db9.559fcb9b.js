"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8846],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),d=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=d(n),f=i,m=p["".concat(l,".").concat(f)]||p[f]||u[f]||o;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=f;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a[p]="string"==typeof e?e:i,s[1]=a;for(var d=2;d<o;d++)s[d]=n[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},4342:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>d});var r=n(7462),i=(n(7294),n(3905));const o={},s=void 0,a={unversionedId:"docs/src/tree_sitter_logic/tree_sitter_util/d_get_specified_nodes",id:"docs/src/tree_sitter_logic/tree_sitter_util/d_get_specified_nodes",title:"d_get_specified_nodes",description:"getspecifiednodes",source:"@site/docs/docs/src/tree_sitter_logic/tree_sitter_util/d_get_specified_nodes.md",sourceDirName:"docs/src/tree_sitter_logic/tree_sitter_util",slug:"/docs/src/tree_sitter_logic/tree_sitter_util/d_get_specified_nodes",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_specified_nodes",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_get_nodes",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_nodes"},next:{title:"d_global_node_types",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_global_node_types"}},l={},d=[{value:"<code>get_specified_nodes</code>",id:"get_specified_nodes",level:2},{value:"Description:",id:"description",level:4},{value:"Important info:",id:"important-info",level:4},{value:"Usage :",id:"usage-",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"get_specified_nodes"},(0,i.kt)("inlineCode",{parentName:"h2"},"get_specified_nodes")),(0,i.kt)("h4",{id:"description"},"Description:"),(0,i.kt)("p",null,"This code snippet performs the action of retrieving all nodes of specified types from a given root node. It is typically used for extracting specific information or manipulating specific parts of a tree structure."),(0,i.kt)("h4",{id:"important-info"},"Important info:"),(0,i.kt)("p",null,"This function relies on the helper function ",(0,i.kt)("inlineCode",{parentName:"p"},"_descendants_with_type")," to recursively traverse the tree and collect nodes of the specified types."),(0,i.kt)("h4",{id:"usage-"},"Usage :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This code snippet is used for extracting specific information from a tree structure."),(0,i.kt)("li",{parentName:"ul"},"This code snippet is used for manipulating specific parts of a tree structure."),(0,i.kt)("li",{parentName:"ul"},"This code snippet is used for filtering out nodes of certain types from a tree structure.")),(0,i.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,i.kt)("p",null,"The function takes a root node and a set of node types as input parameters. It initializes an empty list called ",(0,i.kt)("inlineCode",{parentName:"p"},"nodes")," to store the collected nodes."),(0,i.kt)("p",null,"Then, for each node type in the set of specified node types, it calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"_descendants_with_type")," function to retrieve all descendant nodes of that type from the root node. The collected nodes are then extended to the ",(0,i.kt)("inlineCode",{parentName:"p"},"nodes")," list."),(0,i.kt)("p",null,"Finally, the function returns the list of collected nodes."),(0,i.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Node"),": The code snippet relies on the ",(0,i.kt)("inlineCode",{parentName:"li"},"Node")," class from the ",(0,i.kt)("inlineCode",{parentName:"li"},"tree_sitter")," library. This class represents a node in a tree structure."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"List"),": The code snippet uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"List")," class from the ",(0,i.kt)("inlineCode",{parentName:"li"},"typing")," module to define the return type of the function as a list of nodes."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Set"),": The code snippet uses the ",(0,i.kt)("inlineCode",{parentName:"li"},"Set")," class from the ",(0,i.kt)("inlineCode",{parentName:"li"},"typing")," module to define the type of the ",(0,i.kt)("inlineCode",{parentName:"li"},"node_types")," parameter as a set of strings.")),(0,i.kt)("p",null,"Note: This function does not have any external dependencies beyond the standard library."))}u.isMDXComponent=!0}}]);