"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5880],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>_});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var i=r.createContext({}),d=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=d(e.components);return r.createElement(i.Provider,{value:n},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),l=d(t),m=a,_=l["".concat(i,".").concat(m)]||l[m]||u[m]||o;return t?r.createElement(_,s(s({ref:n},c),{},{components:t})):r.createElement(_,s({ref:n},c))}));function _(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var p={};for(var i in n)hasOwnProperty.call(n,i)&&(p[i]=n[i]);p.originalType=e,p[l]="string"==typeof e?e:a,s[1]=p;for(var d=2;d<o;d++)s[d]=t[d];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4235:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>d});var r=t(7462),a=(t(7294),t(3905));const o={},s=void 0,p={unversionedId:"docs/src/repository_scrapping/code_scrapper/CodeScrapper/d__update_nodes_names",id:"docs/src/repository_scrapping/code_scrapper/CodeScrapper/d__update_nodes_names",title:"d__update_nodes_names",description:"updatenodes_names() -> None",source:"@site/docs/docs/src/repository_scrapping/code_scrapper/CodeScrapper/d__update_nodes_names.md",sourceDirName:"docs/src/repository_scrapping/code_scrapper/CodeScrapper",slug:"/docs/src/repository_scrapping/code_scrapper/CodeScrapper/d__update_nodes_names",permalink:"/documentor_piedpiper/docs/src/repository_scrapping/code_scrapper/CodeScrapper/d__update_nodes_names",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d__update_file_dependencies",permalink:"/documentor_piedpiper/docs/src/repository_scrapping/code_scrapper/CodeScrapper/d__update_file_dependencies"},next:{title:"d__update_parser",permalink:"/documentor_piedpiper/docs/src/repository_scrapping/code_scrapper/CodeScrapper/d__update_parser"}},i={},d=[{value:"<code>_update_nodes_names() -&gt; None</code>",id:"_update_nodes_names---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:d},l="wrapper";function u(e){let{components:n,...t}=e;return(0,a.kt)(l,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"_update_nodes_names---none"},(0,a.kt)("inlineCode",{parentName:"h2"},"_update_nodes_names() -> None")),(0,a.kt)("h4",{id:"description"},"Description:"),(0,a.kt)("p",null,"This method updates the names of relevant and assignment nodes based on the file extension of the input file. This method belongs to the class ",(0,a.kt)("inlineCode",{parentName:"p"},"CodeScrapper"),"."),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("p",null,"This method does not take any parameters."),(0,a.kt)("h4",{id:"returns"},"Returns:"),(0,a.kt)("p",null,"This method does not return any value (",(0,a.kt)("inlineCode",{parentName:"p"},"None"),")."),(0,a.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nscrapper = CodeScrapper()\nscrapper._update_nodes_names()\n")),(0,a.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,a.kt)("p",null,"The method ",(0,a.kt)("inlineCode",{parentName:"p"},"_update_nodes_names")," updates the names of relevant and assignment nodes based on the file extension of the input file. It retrieves the relevant and assignment nodes from the ",(0,a.kt)("inlineCode",{parentName:"p"},"LanguageNodes")," enum using the file extension of the input file. The updated names are stored in the instance variables ",(0,a.kt)("inlineCode",{parentName:"p"},"_relevant_nodes_names")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"_assignment_nodes_names"),"."),(0,a.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"LanguageNodes"),": Enum that contains the names of relevant and assignment nodes for different file extensions."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"self._input_file"),": Instance variable of type ",(0,a.kt)("inlineCode",{parentName:"li"},"FileHandler"),", represents the input file.")))}u.isMDXComponent=!0}}]);