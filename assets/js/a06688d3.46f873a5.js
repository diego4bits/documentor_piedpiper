"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8124],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>_});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=i.createContext({}),c=function(e){var t=i.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return i.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),u=r,_=d["".concat(l,".").concat(u)]||d[u]||m[u]||a;return n?i.createElement(_,o(o({ref:t},p),{},{components:n})):i.createElement(_,o({ref:t},p))}));function _(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6640:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const a={},o=void 0,s={unversionedId:"docs/src/tree_sitter_logic/tree_sitter_util/d__get_class_implementation",id:"docs/src/tree_sitter_logic/tree_sitter_util/d__get_class_implementation",title:"d__get_class_implementation",description:"getclass_implementation",source:"@site/docs/docs/src/tree_sitter_logic/tree_sitter_util/d__get_class_implementation.md",sourceDirName:"docs/src/tree_sitter_logic/tree_sitter_util",slug:"/docs/src/tree_sitter_logic/tree_sitter_util/d__get_class_implementation",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d__get_class_implementation",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d__descendants_with_type",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d__descendants_with_type"},next:{title:"d__recursive_get_nodes",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d__recursive_get_nodes"}},l={},c=[{value:"<code>_get_class_implementation</code>",id:"_get_class_implementation",level:2},{value:"Description:",id:"description",level:4},{value:"Important info:",id:"important-info",level:4},{value:"Usage :",id:"usage-",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],p={toc:c},d="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"_get_class_implementation"},(0,r.kt)("inlineCode",{parentName:"h2"},"_get_class_implementation")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,'This code snippet is a helper function that is used to get the implementation of a class. It takes a Node object and a string representing the file content as input, and returns the class implementation as a string. If there is no implementation specified in the class, it returns the string "NO ARGUMENTS SPECIFIED IN THIS CLASS".'),(0,r.kt)("h4",{id:"important-info"},"Important info:"),(0,r.kt)("p",null,"This function assumes that the given Node object represents a class in the abstract syntax tree."),(0,r.kt)("h4",{id:"usage-"},"Usage :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This code snippet is used to extract the class implementation from a Node object."),(0,r.kt)("li",{parentName:"ul"},"This code snippet is used to check if a class has any implementation specified."),(0,r.kt)("li",{parentName:"ul"},"This code snippet is used to retrieve the implementation of a class as a string.")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},'It defines a set of valid types for the class implementation, which includes "typed_parameter", "expression_statement", and "assignment".'),(0,r.kt)("li",{parentName:"ol"},"It creates an empty list called ",(0,r.kt)("inlineCode",{parentName:"li"},"class_implementation"),"."),(0,r.kt)("li",{parentName:"ol"},"It iterates over the children of the given Node object."),(0,r.kt)("li",{parentName:"ol"},'For each child node, it checks if the node type is "block".'),(0,r.kt)("li",{parentName:"ol"},'If the node type is "block", it iterates over the children of the block node.'),(0,r.kt)("li",{parentName:"ol"},"For each block child node, it checks if the node type is one of the valid types defined earlier."),(0,r.kt)("li",{parentName:"ol"},"If the node type is one of the valid types, it calls the ",(0,r.kt)("inlineCode",{parentName:"li"},"get_implementation")," function (not provided) to get the implementation of the block child node and appends it to the ",(0,r.kt)("inlineCode",{parentName:"li"},"class_implementation")," list."),(0,r.kt)("li",{parentName:"ol"},"It joins all the elements in the ",(0,r.kt)("inlineCode",{parentName:"li"},"class_implementation")," list with a newline character to form the class implementation string."),(0,r.kt)("li",{parentName:"ol"},'It returns the class implementation string if it is not empty, otherwise it returns the string "NO ARGUMENTS SPECIFIED IN THIS CLASS".')),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Node"),": This is a class from the ",(0,r.kt)("inlineCode",{parentName:"li"},"tree_sitter")," module that represents a node in the abstract syntax tree."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"get_implementation")," (not provided): This is a function that is used to get the implementation of a node. It is expected to take a Node object and a string representing the file content as input, and return the implementation as a string.")))}m.isMDXComponent=!0}}]);