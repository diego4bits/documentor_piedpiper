"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6995],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>_});var i=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=i.createContext({}),c=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return i.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=o,_=p["".concat(s,".").concat(m)]||p[m]||u[m]||r;return n?i.createElement(_,a(a({ref:t},d),{},{components:n})):i.createElement(_,a({ref:t},d))}));function _(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},324:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var i=n(7462),o=(n(7294),n(3905));const r={},a=void 0,l={unversionedId:"docs/src/doc_ignore/doc_ignore/DocIgnore/d___init__",id:"docs/src/doc_ignore/doc_ignore/DocIgnore/d___init__",title:"d___init__",description:"init(self, root_path: Path = None) -> None",source:"@site/docs/docs/src/doc_ignore/doc_ignore/DocIgnore/d___init__.md",sourceDirName:"docs/src/doc_ignore/doc_ignore/DocIgnore",slug:"/docs/src/doc_ignore/doc_ignore/DocIgnore/d___init__",permalink:"/documentor_piedpiper/docs/src/doc_ignore/doc_ignore/DocIgnore/d___init__",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d___contains__",permalink:"/documentor_piedpiper/docs/src/doc_ignore/doc_ignore/DocIgnore/d___contains__"},next:{title:"DocIgnore",permalink:"/documentor_piedpiper/docs/src/doc_ignore/doc_ignore/DocIgnore"}},s={},c=[{value:"<code>__init__(self, root_path: Path = None) -&gt; None</code>",id:"__init__self-root_path-path--none---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"__init__self-root_path-path--none---none"},(0,o.kt)("inlineCode",{parentName:"h2"},"__init__(self, root_path: Path = None) -> None")),(0,o.kt)("h4",{id:"description"},"Description:"),(0,o.kt)("p",null,"This method initializes an instance of the ",(0,o.kt)("inlineCode",{parentName:"p"},"DocIgnore")," class. It sets up the ",(0,o.kt)("inlineCode",{parentName:"p"},"ignore")," attribute based on the contents of the ",(0,o.kt)("inlineCode",{parentName:"p"},".docignore")," file located at the root directory of the project. If the file exists, it retrieves its contents, cleans up the lines, and assigns the resulting set to the ",(0,o.kt)("inlineCode",{parentName:"p"},"ignore")," attribute. If the file does not exist, it raises an exception indicating that the ",(0,o.kt)("inlineCode",{parentName:"p"},".docignore")," file was not found."),(0,o.kt)("h4",{id:"parameters"},"Parameters:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"root_path")," (",(0,o.kt)("inlineCode",{parentName:"li"},"Path"),", optional): The root directory path of the project. If not provided, the current directory is used as the default value.")),(0,o.kt)("h4",{id:"returns"},"Returns:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"None"),": This method does not return any value.")),(0,o.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Exception"),": This exception is raised when the ",(0,o.kt)("inlineCode",{parentName:"li"},".docignore")," file is not found at the root directory.")),(0,o.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'# Initialize DocIgnore with default root path\ndoc_ignore = DocIgnore()\n# DocIgnore object is successfully initialized\n\n# Initialize DocIgnore with a specified root path\nroot_path = Path("/path/to/project")\ndoc_ignore = DocIgnore(root_path)\n# DocIgnore object is successfully initialized\n\n# Attempt to initialize DocIgnore without a .docignore file\ndoc_ignore = DocIgnore()\n# Raises an exception: DocIgnore_.docignore_not_found: .docignore is not at the root dir\n')),(0,o.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"If the ",(0,o.kt)("inlineCode",{parentName:"li"},"root_path")," parameter is not provided, the current directory is used as the default root path."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"doc_ignore_path"),' is constructed by appending ".docignore" to the ',(0,o.kt)("inlineCode",{parentName:"li"},"root_path"),"."),(0,o.kt)("li",{parentName:"ul"},"If the ",(0,o.kt)("inlineCode",{parentName:"li"},"doc_ignore_path")," file exists:",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"The front commit is selected using ",(0,o.kt)("inlineCode",{parentName:"li"},"GitManager.select_front_commit()"),"."),(0,o.kt)("li",{parentName:"ul"},"The contents of the ",(0,o.kt)("inlineCode",{parentName:"li"},"doc_ignore_path")," file are retrieved using ",(0,o.kt)("inlineCode",{parentName:"li"},"GitRetrieaver.retrieve_file(doc_ignore_path)"),"."),(0,o.kt)("li",{parentName:"ul"},"The contents are split into lines and stored in ",(0,o.kt)("inlineCode",{parentName:"li"},"doc_lines"),"."),(0,o.kt)("li",{parentName:"ul"},"The lines are converted into a set and stored in ",(0,o.kt)("inlineCode",{parentName:"li"},"doc_set"),"."),(0,o.kt)("li",{parentName:"ul"},"Each line in ",(0,o.kt)("inlineCode",{parentName:"li"},"doc_set")," is stripped of leading and trailing whitespace and stored in ",(0,o.kt)("inlineCode",{parentName:"li"},"clean_doc_set"),"."),(0,o.kt)("li",{parentName:"ul"},"The ",(0,o.kt)("inlineCode",{parentName:"li"},"clean_doc_set")," is assigned to the ",(0,o.kt)("inlineCode",{parentName:"li"},"ignore")," attribute."),(0,o.kt)("li",{parentName:"ul"},"The tail commit is selected using ",(0,o.kt)("inlineCode",{parentName:"li"},"GitManager.select_tail_commit()"),"."))),(0,o.kt)("li",{parentName:"ul"},"If the ",(0,o.kt)("inlineCode",{parentName:"li"},"doc_ignore_path")," file does not exist, an exception is raised indicating that the ",(0,o.kt)("inlineCode",{parentName:"li"},".docignore")," file was not found.")),(0,o.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"metaclasses.singleton_meta.SingletonMeta"),": This dependency provides the metaclass for the ",(0,o.kt)("inlineCode",{parentName:"li"},"DocIgnore")," class."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git_tools.git_retrieaver.GitRetrieaver"),": This dependency provides the functionality to retrieve the contents of a file from a Git repository."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"git_tools.git_manager.GitManager"),": This dependency provides the functionality to manage Git operations."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"pathlib.Path"),": This dependency provides the ",(0,o.kt)("inlineCode",{parentName:"li"},"Path")," class for working with file system paths."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"typing.ClassVar"),": This dependency provides the ",(0,o.kt)("inlineCode",{parentName:"li"},"ClassVar")," type hint.")))}u.isMDXComponent=!0}}]);