"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[187],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=i.createContext({}),l=function(e){var t=i.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=l(e.components);return i.createElement(d.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},_=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,d=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=l(n),_=r,h=c["".concat(d,".").concat(_)]||c[_]||u[_]||o;return n?i.createElement(h,a(a({ref:t},p),{},{components:n})):i.createElement(h,a({ref:t},p))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=_;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s[c]="string"==typeof e?e:r,a[1]=s;for(var l=2;l<o;l++)a[l]=n[l];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}_.displayName="MDXCreateElement"},9221:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>l});var i=n(7462),r=(n(7294),n(3905));const o={},a=void 0,s={unversionedId:"docs/src/tree_sitter_logic/tree_sitter_util/d__descendants_with_type",id:"docs/src/tree_sitter_logic/tree_sitter_util/d__descendants_with_type",title:"d__descendants_with_type",description:"descendantswith_type",source:"@site/docs/docs/src/tree_sitter_logic/tree_sitter_util/d__descendants_with_type.md",sourceDirName:"docs/src/tree_sitter_logic/tree_sitter_util",slug:"/docs/src/tree_sitter_logic/tree_sitter_util/d__descendants_with_type",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d__descendants_with_type",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_LanguageNodes",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/languages/d_LanguageNodes"},next:{title:"d__get_class_implementation",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d__get_class_implementation"}},d={},l=[{value:"<code>_descendants_with_type</code>",id:"_descendants_with_type",level:2},{value:"Description:",id:"description",level:4},{value:"Important info:",id:"important-info",level:4},{value:"Usage :",id:"usage-",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],p={toc:l},c="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"_descendants_with_type"},(0,r.kt)("inlineCode",{parentName:"h2"},"_descendants_with_type")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This code snippet performs a recursive search through the descendants of a given ",(0,r.kt)("inlineCode",{parentName:"p"},"Node")," object, looking for nodes with a specific type. It returns a list of all the nodes found with the specified type."),(0,r.kt)("h4",{id:"important-info"},"Important info:"),(0,r.kt)("p",null,"This function is an internal helper function and is not meant to be called directly from outside the module."),(0,r.kt)("h4",{id:"usage-"},"Usage :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This code snippet is used to find all the descendants of a ",(0,r.kt)("inlineCode",{parentName:"li"},"Node")," object with a specific type."),(0,r.kt)("li",{parentName:"ul"},"It is used to perform specific operations on all the nodes found with the specified type.")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("p",null,"The function takes in a ",(0,r.kt)("inlineCode",{parentName:"p"},"Node")," object and a ",(0,r.kt)("inlineCode",{parentName:"p"},"node_type")," as input. It initializes an empty list called ",(0,r.kt)("inlineCode",{parentName:"p"},"nodes")," to store the found nodes."),(0,r.kt)("p",null,"It checks if the type of the current node is the same as the specified ",(0,r.kt)("inlineCode",{parentName:"p"},"node_type"),". If it is, the current node is appended to the ",(0,r.kt)("inlineCode",{parentName:"p"},"nodes")," list."),(0,r.kt)("p",null,"Then, it recursively calls ",(0,r.kt)("inlineCode",{parentName:"p"},"_descendants_with_type")," on each child of the current node, and extends the ",(0,r.kt)("inlineCode",{parentName:"p"},"nodes")," list with the nodes returned by the recursive calls."),(0,r.kt)("p",null,"Finally, it returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"nodes")," list containing all the nodes found with the specified type."),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Node"),": This is a class provided by the ",(0,r.kt)("inlineCode",{parentName:"li"},"tree_sitter")," module. It represents a node in the abstract syntax tree (AST) generated by the Tree-sitter parser."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"List")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"Set"),": These are generic types provided by the ",(0,r.kt)("inlineCode",{parentName:"li"},"typing")," module. They are used to define the type hints for the function parameters and return value.")))}u.isMDXComponent=!0}}]);