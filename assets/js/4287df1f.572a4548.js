"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8911],{3905:(e,t,i)=>{i.d(t,{Zo:()=>m,kt:()=>g});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},m=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(i),u=r,g=c["".concat(s,".").concat(u)]||c[u]||d[u]||a;return i?n.createElement(g,o(o({ref:t},m),{},{components:i})):n.createElement(g,o({ref:t},m))}));function g(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,o[1]=l;for(var p=2;p<a;p++)o[p]=i[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},6914:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var n=i(7462),r=(i(7294),i(3905));const a={},o=void 0,l={unversionedId:"docs/src/git_tools/git_manager/d_GitManager",id:"docs/src/git_tools/git_manager/d_GitManager",title:"d_GitManager",description:"GitManager",source:"@site/docs/docs/src/git_tools/git_manager/d_GitManager.md",sourceDirName:"docs/src/git_tools/git_manager",slug:"/docs/src/git_tools/git_manager/d_GitManager",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/d_GitManager",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"GitManager",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager"},next:{title:"d_get_file_git_object",permalink:"/documentor_piedpiper/docs/src/git_tools/git_retrieaver/GitRetrieaver/d_get_file_git_object"}},s={},p=[{value:"<code>GitManager</code>",id:"gitmanager",level:2},{value:"Description:",id:"description",level:4},{value:"Attributes:",id:"attributes",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],m={toc:p},c="wrapper";function d(e){let{components:t,...i}=e;return(0,r.kt)(c,(0,n.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"gitmanager"},(0,r.kt)("inlineCode",{parentName:"h2"},"GitManager")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This class represents a Git manager and provides functionalities for managing a Git repository."),(0,r.kt)("h4",{id:"attributes"},"Attributes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"instance")," (",(0,r.kt)("inlineCode",{parentName:"li"},"ClassVar"),"): A class variable that holds an instance of the ",(0,r.kt)("inlineCode",{parentName:"li"},"GitManager")," class. This is used to implement the Singleton design pattern."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"project_repo")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Repository"),"): Represents the Git repository associated with the project."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"head_commit")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Commit"),"): Represents the latest commit in the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"front_commit")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Commit"),"): Represents the first commit in the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tail_commit")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Commit"),"): Represents the last commit in the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"selected_commit")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Commit"),"): Represents the currently selected commit in the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"front_commit_tree")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Tree"),"): Represents the file tree of the first commit in the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tail_commit_tree")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Tree"),"): Represents the file tree of the last commit in the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"selected_commit_tree")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Tree"),"): Represents the file tree of the currently selected commit in the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"project_file_paths")," (",(0,r.kt)("inlineCode",{parentName:"li"},"List[Path]"),"): A list of ",(0,r.kt)("inlineCode",{parentName:"li"},"Path")," objects representing the file paths in the project repository.")),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case of instantiating and using the class\ninstance = GitManager()\n# The rest of the example\n")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GitManager")," class provides a way to manage a Git repository. It allows accessing information about the commits, file trees, and file paths in the repository. The class utilizes the PyGit2 library for interacting with Git repositories."),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SingletonMeta"),": A metaclass that implements the Singleton design pattern. It ensures that only one instance of the ",(0,r.kt)("inlineCode",{parentName:"li"},"GitManager")," class can exist."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Path"),": A class from the ",(0,r.kt)("inlineCode",{parentName:"li"},"pathlib")," module that represents a file system path."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Repository"),": A class from the ",(0,r.kt)("inlineCode",{parentName:"li"},"pygit2")," module that represents a Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Commit"),": A class from the ",(0,r.kt)("inlineCode",{parentName:"li"},"pygit2")," module that represents a Git commit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Tree"),": A class from the ",(0,r.kt)("inlineCode",{parentName:"li"},"pygit2")," module that represents a Git file tree."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"List"),": A generic class from the ",(0,r.kt)("inlineCode",{parentName:"li"},"typing")," module that represents a list.")))}d.isMDXComponent=!0}}]);