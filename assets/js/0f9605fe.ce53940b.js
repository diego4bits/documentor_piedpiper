"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6929],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>f});var r=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var s=r.createContext({}),c=function(e){var t=r.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},p=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(i),h=n,f=d["".concat(s,".").concat(h)]||d[h]||u[h]||o;return i?r.createElement(f,a(a({ref:t},p),{},{components:i})):r.createElement(f,a({ref:t},p))}));function f(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=i.length,a=new Array(o);a[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[d]="string"==typeof e?e:n,a[1]=l;for(var c=2;c<o;c++)a[c]=i[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,i)}h.displayName="MDXCreateElement"},6424:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=i(7462),n=(i(7294),i(3905));const o={},a=void 0,l={unversionedId:"docs/src/git_tools/git_retrieaver/GitRetrieaver/d_get_file_git_object",id:"docs/src/git_tools/git_retrieaver/GitRetrieaver/d_get_file_git_object",title:"d_get_file_git_object",description:"getfilegitobject(filepath: Path) -> Blob",source:"@site/docs/docs/src/git_tools/git_retrieaver/GitRetrieaver/d_get_file_git_object.md",sourceDirName:"docs/src/git_tools/git_retrieaver/GitRetrieaver",slug:"/docs/src/git_tools/git_retrieaver/GitRetrieaver/d_get_file_git_object",permalink:"/documentor_piedpiper/docs/src/git_tools/git_retrieaver/GitRetrieaver/d_get_file_git_object",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_GitManager",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/d_GitManager"},next:{title:"d_retrieve_file",permalink:"/documentor_piedpiper/docs/src/git_tools/git_retrieaver/GitRetrieaver/d_retrieve_file"}},s={},c=[{value:"<code>get_file_git_object(file_path: Path) -&gt; Blob</code>",id:"get_file_git_objectfile_path-path---blob",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],p={toc:c},d="wrapper";function u(e){let{components:t,...i}=e;return(0,n.kt)(d,(0,r.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"get_file_git_objectfile_path-path---blob"},(0,n.kt)("inlineCode",{parentName:"h2"},"get_file_git_object(file_path: Path) -> Blob")),(0,n.kt)("h4",{id:"description"},"Description:"),(0,n.kt)("p",null,"This method retrieves the Git object for a specific file path. It belongs to the class ",(0,n.kt)("inlineCode",{parentName:"p"},"GitRetriever")," and is used to get the Git Blob object corresponding to the file."),(0,n.kt)("h4",{id:"parameters"},"Parameters:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"file_path")," (",(0,n.kt)("inlineCode",{parentName:"li"},"Path"),"): The path of the file for which the Git object needs to be retrieved.")),(0,n.kt)("h4",{id:"returns"},"Returns:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Blob"),": The Git Blob object corresponding to the file.")),(0,n.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Exception"),": This exception is thrown when no object is found in the Git tree for the given file path.")),(0,n.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'# Retrieve the Git object for a file\nresult_case1 = get_file_git_object(Path("path/to/file.txt"))\nprint(result_case1)\n\n# Another use case (if applicable)\nresult_case2 = get_file_git_object(Path("path/to/another_file.py"))\nprint(result_case2)\n')),(0,n.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,n.kt)("p",null,"The method first splits the file path into individual components. It then traverses the Git tree starting from the selected commit, following the path components. If a path component is found in the current object, the method updates the current object to that path. If a path component is not found, an exception is raised. Finally, the method returns the current object, which is the Git Blob object for the file."),(0,n.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"git_manager.GitManager"),": This class provides the ",(0,n.kt)("inlineCode",{parentName:"li"},"selected_commit_tree")," method, which is used to get the current Git tree."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"pathlib.Path"),": This module is used to handle the file path."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"pygit2.Blob"),": This class represents a Git Blob object.")))}u.isMDXComponent=!0}}]);