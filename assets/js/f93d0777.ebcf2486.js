"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3797],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var c=r.createContext({}),s=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=s(n),m=i,h=p["".concat(c,".").concat(m)]||p[m]||u[m]||a;return n?r.createElement(h,o(o({ref:t},d),{},{components:n})):r.createElement(h,o({ref:t},d))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,o=new Array(a);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:i,o[1]=l;for(var s=2;s<a;s++)o[s]=n[s];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5433:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=n(7462),i=(n(7294),n(3905));const a={},o=void 0,l={unversionedId:"docs/src/git_tools/git_file_checker/GitFileChecker/update_changed_files",id:"docs/src/git_tools/git_file_checker/GitFileChecker/update_changed_files",title:"update_changed_files",description:"updatechangedfiles() -> None",source:"@site/docs/docs/src/git_tools/git_file_checker/GitFileChecker/update_changed_files.md",sourceDirName:"docs/src/git_tools/git_file_checker/GitFileChecker",slug:"/docs/src/git_tools/git_file_checker/GitFileChecker/update_changed_files",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/GitFileChecker/update_changed_files",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"FileHandler",permalink:"/documentor_piedpiper/docs/src/file_handler/file_handler/FileHandler"},next:{title:"GitFileChecker",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/GitFileChecker"}},c={},s=[{value:"<code>update_changed_files() -&gt; None</code>",id:"update_changed_files---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],d={toc:s},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"update_changed_files---none"},(0,i.kt)("inlineCode",{parentName:"h2"},"update_changed_files() -> None")),(0,i.kt)("h4",{id:"description"},"Description:"),(0,i.kt)("p",null,"This method performs the update of changed files in the Git repository. It belongs to the ",(0,i.kt)("inlineCode",{parentName:"p"},"GitFileChecker")," class."),(0,i.kt)("h4",{id:"parameters"},"Parameters:"),(0,i.kt)("p",null,"This method does not take any parameters."),(0,i.kt)("h4",{id:"returns"},"Returns:"),(0,i.kt)("p",null,"This method does not return any value."),(0,i.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,i.kt)("p",null,"This method does not throw any exceptions."),(0,i.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nGitFileChecker.update_changed_files()\n")),(0,i.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Get the tail commit using the ",(0,i.kt)("inlineCode",{parentName:"li"},"tail_commit")," method from the ",(0,i.kt)("inlineCode",{parentName:"li"},"GitManager")," class."),(0,i.kt)("li",{parentName:"ol"},"Get the front commit using the ",(0,i.kt)("inlineCode",{parentName:"li"},"front_commit")," method from the ",(0,i.kt)("inlineCode",{parentName:"li"},"GitManager")," class."),(0,i.kt)("li",{parentName:"ol"},"Calculate the difference between the tail and front commits using the ",(0,i.kt)("inlineCode",{parentName:"li"},"_get_diff")," method from the ",(0,i.kt)("inlineCode",{parentName:"li"},"GitFileChecker")," class."),(0,i.kt)("li",{parentName:"ol"},"Extract the changes from the difference using the ",(0,i.kt)("inlineCode",{parentName:"li"},"_extract_changes")," method from the ",(0,i.kt)("inlineCode",{parentName:"li"},"GitFileChecker")," class.")),(0,i.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"GitManager"),": This class is responsible for managing Git operations and providing access to commit information.")))}u.isMDXComponent=!0}}]);