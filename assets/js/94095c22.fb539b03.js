"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>u});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var o=i.createContext({}),p=function(e){var t=i.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):d(d({},t),e)),n},l=function(e){var t=p(e.components);return i.createElement(o.Provider,{value:t},e.children)},_="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),_=p(n),m=a,u=_["".concat(o,".").concat(m)]||_[m]||c[m]||r;return n?i.createElement(u,d(d({ref:t},l),{},{components:n})):i.createElement(u,d({ref:t},l))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,d=new Array(r);d[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[_]="string"==typeof e?e:a,d[1]=s;for(var p=2;p<r;p++)d[p]=n[p];return i.createElement.apply(null,d)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8420:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>d,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=n(7462),a=(n(7294),n(3905));const r={},d=void 0,s={unversionedId:"docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_new_added_snippets_dict",id:"docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_new_added_snippets_dict",title:"d__update_new_added_snippets_dict",description:"updatenewaddedsnippets_dict() -> None",source:"@site/docs/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_new_added_snippets_dict.md",sourceDirName:"docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager",slug:"/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_new_added_snippets_dict",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_new_added_snippets_dict",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d__update_modified_snippets_dict",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_modified_snippets_dict"},next:{title:"d__update_old_deleted_snippets_dict",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__update_old_deleted_snippets_dict"}},o={},p=[{value:"<code>_update_new_added_snippets_dict() -&gt; None</code>",id:"_update_new_added_snippets_dict---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],l={toc:p},_="wrapper";function c(e){let{components:t,...n}=e;return(0,a.kt)(_,(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"_update_new_added_snippets_dict---none"},(0,a.kt)("inlineCode",{parentName:"h2"},"_update_new_added_snippets_dict() -> None")),(0,a.kt)("h4",{id:"description"},"Description:"),(0,a.kt)("p",null,"This method updates the ",(0,a.kt)("inlineCode",{parentName:"p"},"_new_added_snippets_dict")," attribute of the ",(0,a.kt)("inlineCode",{parentName:"p"},"ModifiedFilesManager")," class with the snippets that have been added to the file scrappers. It compares the keys of the ",(0,a.kt)("inlineCode",{parentName:"p"},"storage_dict")," attributes of the ",(0,a.kt)("inlineCode",{parentName:"p"},"FileScrapper")," instances (",(0,a.kt)("inlineCode",{parentName:"p"},"_file_scrapper_front")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"_file_scrapper_tail"),") and selects the snippets that are present in ",(0,a.kt)("inlineCode",{parentName:"p"},"_file_scrapper_front")," but not in ",(0,a.kt)("inlineCode",{parentName:"p"},"_file_scrapper_tail"),". It then assigns the selected snippets to the ",(0,a.kt)("inlineCode",{parentName:"p"},"_new_added_snippets_dict")," attribute."),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("p",null,"This method does not take any parameters."),(0,a.kt)("h4",{id:"returns"},"Returns:"),(0,a.kt)("p",null,"This method does not return anything."),(0,a.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nmodified_files_manager = ModifiedFilesManager()\nmodified_files_manager._update_new_added_snippets_dict()\n")),(0,a.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Retrieve the keys from the ",(0,a.kt)("inlineCode",{parentName:"li"},"storage_dict")," attribute of ",(0,a.kt)("inlineCode",{parentName:"li"},"_file_scrapper_front")," and assign them to ",(0,a.kt)("inlineCode",{parentName:"li"},"front_snippets_keys"),"."),(0,a.kt)("li",{parentName:"ol"},"Retrieve the keys from the ",(0,a.kt)("inlineCode",{parentName:"li"},"storage_dict")," attribute of ",(0,a.kt)("inlineCode",{parentName:"li"},"_file_scrapper_tail")," and assign them to ",(0,a.kt)("inlineCode",{parentName:"li"},"tail_snippets_keys"),"."),(0,a.kt)("li",{parentName:"ol"},"Calculate the difference between ",(0,a.kt)("inlineCode",{parentName:"li"},"front_snippets_keys")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"tail_snippets_keys")," and assign the result to ",(0,a.kt)("inlineCode",{parentName:"li"},"added_snippets_hash_ints"),"."),(0,a.kt)("li",{parentName:"ol"},"Create a dictionary ",(0,a.kt)("inlineCode",{parentName:"li"},"added_snippets_dict")," using a dictionary comprehension, iterating over the items of ",(0,a.kt)("inlineCode",{parentName:"li"},"_file_scrapper_front.storage_dict"),". Only the items with keys present in ",(0,a.kt)("inlineCode",{parentName:"li"},"added_snippets_hash_ints")," are selected."),(0,a.kt)("li",{parentName:"ol"},"Assign ",(0,a.kt)("inlineCode",{parentName:"li"},"added_snippets_dict")," to the ",(0,a.kt)("inlineCode",{parentName:"li"},"_new_added_snippets_dict")," attribute.")),(0,a.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FileScrapper"),": This class is imported from the module ",(0,a.kt)("inlineCode",{parentName:"li"},"repository_scrapping.file_scrapper")," and is used to retrieve the snippets' storage dictionaries."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModifiedFilesManager"),": This class is imported from the module ",(0,a.kt)("inlineCode",{parentName:"li"},"modified_files_manager")," and is the class that owns the ",(0,a.kt)("inlineCode",{parentName:"li"},"_update_new_added_snippets_dict")," method.")))}c.isMDXComponent=!0}}]);