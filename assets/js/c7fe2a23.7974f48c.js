"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[364],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>u});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function l(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(i),f=r,u=p["".concat(s,".").concat(f)]||p[f]||m[f]||a;return i?n.createElement(u,o(o({ref:t},c),{},{components:i})):n.createElement(u,o({ref:t},c))}));function u(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=i[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}f.displayName="MDXCreateElement"},9883:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var n=i(7462),r=(i(7294),i(3905));const a={},o=void 0,l={unversionedId:"docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__check_modified_files",id:"docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__check_modified_files",title:"d__check_modified_files",description:"checkmodified_files() -> None",source:"@site/docs/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__check_modified_files.md",sourceDirName:"docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager",slug:"/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__check_modified_files",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__check_modified_files",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d___init__",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d___init__"},next:{title:"d__start_file_scrapper_front",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/modified_files_manager/ModifiedFilesManager/d__start_file_scrapper_front"}},s={},d=[{value:"<code>_check_modified_files() -&gt; None</code>",id:"_check_modified_files---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:d},p="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"_check_modified_files---none"},(0,r.kt)("inlineCode",{parentName:"h2"},"_check_modified_files() -> None")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This method performs a series of actions to check for modified files and update the necessary data structures. It belongs to the class ",(0,r.kt)("inlineCode",{parentName:"p"},"ModifiedFilesManager"),"."),(0,r.kt)("h4",{id:"parameters"},"Parameters:"),(0,r.kt)("p",null,"This method does not take any parameters."),(0,r.kt)("h4",{id:"returns"},"Returns:"),(0,r.kt)("p",null,"This method does not return anything (",(0,r.kt)("inlineCode",{parentName:"p"},"None"),")."),(0,r.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,r.kt)("p",null,"This method does not throw any exceptions."),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nmanager = ModifiedFilesManager()\nmanager._check_modified_files()\n\n# Another use case (if applicable)\n...\n")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Checks if there are any modified files using the ",(0,r.kt)("inlineCode",{parentName:"li"},"GitFileChecker.modified")," attribute."),(0,r.kt)("li",{parentName:"ol"},"If there are modified files:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Calls the ",(0,r.kt)("inlineCode",{parentName:"li"},"_start_file_scrappers()")," method to initiate the file scrapers."),(0,r.kt)("li",{parentName:"ul"},"Calls the ",(0,r.kt)("inlineCode",{parentName:"li"},"_update_all_snippets_dict()")," method to update the dictionary of all code snippets."),(0,r.kt)("li",{parentName:"ul"},"Calls the ",(0,r.kt)("inlineCode",{parentName:"li"},"_update_snippets_to_doc()")," method to update the snippets that need to be documented."),(0,r.kt)("li",{parentName:"ul"},"Calls the ",(0,r.kt)("inlineCode",{parentName:"li"},"_update_snippets_to_delete()")," method to update the snippets that need to be deleted.")))),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GitFileChecker"),": Checks for modified files using Git."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ModifiedFilesManager"),": The class to which this method belongs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"FileScrapper"),": Scrapes files for code snippets."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SnippetStorage"),": Stores code snippets."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"CodeSnippet"),": Represents a code snippet."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GitManager"),": Manages Git operations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"SingletonMeta"),": Metaclass for creating singleton classes."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Dict"),": A dictionary type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"ClassVar"),": Type hint for a class variable.")),(0,r.kt)("p",null,"Note: The actual implementation may have additional dependencies that are not listed here."))}m.isMDXComponent=!0}}]);