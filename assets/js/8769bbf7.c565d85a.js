"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[496],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),c=p(n),u=r,f=c["".concat(s,".").concat(u)]||c[u]||m[u]||o;return n?i.createElement(f,a(a({ref:t},d),{},{components:n})):i.createElement(f,a({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:r,a[1]=l;for(var p=2;p<o;p++)a[p]=n[p];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},427:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var i=n(7462),r=(n(7294),n(3905));const o={},a=void 0,l={unversionedId:"docs/src/tree_sitter_logic/tree_sitter_util/d_get_implementation",id:"docs/src/tree_sitter_logic/tree_sitter_util/d_get_implementation",title:"d_get_implementation",description:"get_implementation",source:"@site/docs/docs/src/tree_sitter_logic/tree_sitter_util/d_get_implementation.md",sourceDirName:"docs/src/tree_sitter_logic/tree_sitter_util",slug:"/docs/src/tree_sitter_logic/tree_sitter_util/d_get_implementation",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_implementation",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_get_identifier",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_identifier"},next:{title:"d_get_nodes",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_nodes"}},s={},p=[{value:"<code>get_implementation</code>",id:"get_implementation",level:2},{value:"Description:",id:"description",level:4},{value:"Important info:",id:"important-info",level:4},{value:"Usage :",id:"usage-",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],d={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,i.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"get_implementation"},(0,r.kt)("inlineCode",{parentName:"h2"},"get_implementation")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This code snippet is a function called ",(0,r.kt)("inlineCode",{parentName:"p"},"get_implementation")," that takes a ",(0,r.kt)("inlineCode",{parentName:"p"},"node")," object and a ",(0,r.kt)("inlineCode",{parentName:"p"},"file_str")," string as input and returns the implementation of the given node. It is typically used to extract the implementation code for a specific node, such as a class definition, from a file."),(0,r.kt)("h4",{id:"important-info"},"Important info:"),(0,r.kt)("p",null,"This function is important for parsing and extracting code information from a file. It allows for the retrieval of the implementation code for different types of nodes."),(0,r.kt)("h4",{id:"usage-"},"Usage :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This code snippet is used to extract the implementation code for a class definition node."),(0,r.kt)("li",{parentName:"ul"},"This code snippet is used to extract the implementation code for other types of nodes.")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("p",null,"The function first initializes an empty string called ",(0,r.kt)("inlineCode",{parentName:"p"},"implementation"),". It then checks if the type of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"node"),' is a "class_definition". If it is, it calls the ',(0,r.kt)("inlineCode",{parentName:"p"},"_get_class_implementation")," function passing the ",(0,r.kt)("inlineCode",{parentName:"p"},"node")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"file_str")," as arguments and assigns the result to ",(0,r.kt)("inlineCode",{parentName:"p"},"implementation"),". This function is not provided in the code snippet, so its implementation is not shown here."),(0,r.kt)("p",null,'If the type of the node is not a "class_definition", the function simply assigns the substring of ',(0,r.kt)("inlineCode",{parentName:"p"},"file_str")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"node"),"'s start byte to its end byte to ",(0,r.kt)("inlineCode",{parentName:"p"},"implementation"),"."),(0,r.kt)("p",null,"Finally, the function returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"implementation")," string."),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Node"),": This dependency is imported from the ",(0,r.kt)("inlineCode",{parentName:"li"},"tree_sitter")," module. It represents a node in the syntax tree generated by the Tree-sitter parser."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"List"),": This dependency is imported from the ",(0,r.kt)("inlineCode",{parentName:"li"},"typing")," module. It represents a list type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Set"),": This dependency is imported from the ",(0,r.kt)("inlineCode",{parentName:"li"},"typing")," module. It represents a set type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"NodeInfo"),": This dependency is imported from the ",(0,r.kt)("inlineCode",{parentName:"li"},"snippet_management.node_info")," module. It represents information about a node in the syntax tree.")))}m.isMDXComponent=!0}}]);