"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4751],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,s=function(e,t){if(null==e)return{};var n,a,s={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,s=e.mdxType,i=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),m=s,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(g,r(r({ref:t},p),{},{components:n})):a.createElement(g,r({ref:t},p))}));function g(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var i=n.length,r=new Array(i);r[0]=m;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:s,r[1]=o;for(var c=2;c<i;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3862:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),s=(n(7294),n(3905));const i={},r=void 0,o={unversionedId:"docs/src/metaclasses/singleton_meta/d_SingletonMeta",id:"docs/src/metaclasses/singleton_meta/d_SingletonMeta",title:"d_SingletonMeta",description:"SingletonMeta",source:"@site/docs/docs/src/metaclasses/singleton_meta/d_SingletonMeta.md",sourceDirName:"docs/src/metaclasses/singleton_meta",slug:"/docs/src/metaclasses/singleton_meta/d_SingletonMeta",permalink:"/documentor_piedpiper/docs/src/metaclasses/singleton_meta/d_SingletonMeta",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"SingletonMeta",permalink:"/documentor_piedpiper/docs/src/metaclasses/singleton_meta/SingletonMeta"},next:{title:"change_file",permalink:"/documentor_piedpiper/docs/src/repository_scrapping/code_scrapper/CodeScrapper/change_file"}},l={},c=[{value:"<code>SingletonMeta</code>",id:"singletonmeta",level:2},{value:"Description:",id:"description",level:4},{value:"Attributes:",id:"attributes",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,s.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"singletonmeta"},(0,s.kt)("inlineCode",{parentName:"h2"},"SingletonMeta")),(0,s.kt)("h4",{id:"description"},"Description:"),(0,s.kt)("p",null,"This class represents a metaclass for creating singleton classes. A singleton class is a class that can only have one instance throughout the entire program. This metaclass ensures that only one instance of the class is created and provides a way to access that instance."),(0,s.kt)("h4",{id:"attributes"},"Attributes:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"_instances")," (",(0,s.kt)("inlineCode",{parentName:"li"},"dict"),"): A dictionary that stores the instances of the singleton classes. The keys are the class names and the values are the instances of the classes.")),(0,s.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case of using the SingletonMeta metaclass\nclass MySingletonClass(metaclass=SingletonMeta):\n    pass\n\ninstance = MySingletonClass()\n# The rest of the example\n")),(0,s.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"SingletonMeta")," metaclass is used as a metaclass for creating singleton classes. When a class is defined with ",(0,s.kt)("inlineCode",{parentName:"p"},"metaclass=SingletonMeta"),", the metaclass is responsible for creating the class and ensuring that only one instance of the class is created."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"SingletonMeta")," class maintains a dictionary ",(0,s.kt)("inlineCode",{parentName:"p"},"_instances")," that stores the instances of the singleton classes. When a new instance of a singleton class is created, the metaclass checks if an instance of that class already exists in the ",(0,s.kt)("inlineCode",{parentName:"p"},"_instances")," dictionary. If an instance exists, the existing instance is returned. If no instance exists, a new instance is created and stored in the ",(0,s.kt)("inlineCode",{parentName:"p"},"_instances")," dictionary."),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"SingletonMeta")," metaclass ensures that only one instance of each singleton class is created and provides a way to access that instance."),(0,s.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,s.kt)("p",null,"This class does not have any dependencies."))}u.isMDXComponent=!0}}]);