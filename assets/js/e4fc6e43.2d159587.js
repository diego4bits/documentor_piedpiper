"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2433],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>m});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var l=n.createContext({}),p=function(e){var t=n.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(i),u=r,m=d["".concat(l,".").concat(u)]||d[u]||h[u]||a;return i?n.createElement(m,o(o({ref:t},c),{},{components:i})):n.createElement(m,o({ref:t},c))}));function m(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:r,o[1]=s;for(var p=2;p<a;p++)o[p]=i[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},6882:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=i(7462),r=(i(7294),i(3905));const a={},o=void 0,s={unversionedId:"docs/src/git_tools/git_file_paths/d_GitFilePaths",id:"docs/src/git_tools/git_file_paths/d_GitFilePaths",title:"d_GitFilePaths",description:"GitFilePaths",source:"@site/docs/docs/src/git_tools/git_file_paths/d_GitFilePaths.md",sourceDirName:"docs/src/git_tools/git_file_paths",slug:"/docs/src/git_tools/git_file_paths/d_GitFilePaths",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_paths/d_GitFilePaths",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"GitFilePaths",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_paths/GitFilePaths"},next:{title:"commit",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/commit"}},l={},p=[{value:"<code>GitFilePaths</code>",id:"gitfilepaths",level:2},{value:"Description:",id:"description",level:4},{value:"Attributes:",id:"attributes",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:p},d="wrapper";function h(e){let{components:t,...i}=e;return(0,r.kt)(d,(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"gitfilepaths"},(0,r.kt)("inlineCode",{parentName:"h2"},"GitFilePaths")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This class represents a collection of file paths within a Git repository and provides functionalities for managing and manipulating these paths."),(0,r.kt)("h4",{id:"attributes"},"Attributes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git_manager")," (",(0,r.kt)("inlineCode",{parentName:"li"},"GitManager"),"): An instance of the ",(0,r.kt)("inlineCode",{parentName:"li"},"GitManager")," class, which is responsible for interacting with the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"doc_ignore")," (",(0,r.kt)("inlineCode",{parentName:"li"},"DocIgnore"),"): An instance of the ",(0,r.kt)("inlineCode",{parentName:"li"},"DocIgnore")," class, which is used to ignore certain files or directories when collecting file paths."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"path")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Path"),"): The path to the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"tree")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Tree"),"): The current Git tree object representing the files in the repository.")),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case of instantiating and using the class\ngit_manager = GitManager()\ndoc_ignore = DocIgnore()\npath = Path('/path/to/git/repository')\ninstance = GitFilePaths(git_manager, doc_ignore, path)\n# The rest of the example\n")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GitFilePaths")," class works by utilizing the ",(0,r.kt)("inlineCode",{parentName:"p"},"GitManager")," class to interact with the Git repository. It allows you to specify a path to the repository and then collects the file paths within it. The ",(0,r.kt)("inlineCode",{parentName:"p"},"DocIgnore")," class is used to ignore certain files or directories based on predefined rules. The class uses a ",(0,r.kt)("inlineCode",{parentName:"p"},"Tree")," object from the ",(0,r.kt)("inlineCode",{parentName:"p"},"pygit2")," library to represent the files in the repository."),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GitManager"),": This class is responsible for interacting with the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"DocIgnore"),": This class is used to ignore certain files or directories when collecting file paths."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Path")," (from ",(0,r.kt)("inlineCode",{parentName:"li"},"pathlib"),"): This class is used to represent file system paths."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Tree")," (from ",(0,r.kt)("inlineCode",{parentName:"li"},"pygit2"),"): This class is used to represent the files in the Git repository.")))}h.isMDXComponent=!0}}]);