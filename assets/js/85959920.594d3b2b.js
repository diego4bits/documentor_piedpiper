"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9021],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(n),g=a,f=p["".concat(l,".").concat(g)]||p[g]||d[g]||i;return n?r.createElement(f,o(o({ref:t},u),{},{components:n})):r.createElement(f,o({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=g;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},3022:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={},o=void 0,s={unversionedId:"docs/src/tree_sitter_logic/languages/LanguageNodes",id:"docs/src/tree_sitter_logic/languages/LanguageNodes",title:"LanguageNodes",description:"LanguageNodes",source:"@site/docs/docs/src/tree_sitter_logic/languages/LanguageNodes.md",sourceDirName:"docs/src/tree_sitter_logic/languages",slug:"/docs/src/tree_sitter_logic/languages/LanguageNodes",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/languages/LanguageNodes",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"FileExtension",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/languages/FileExtension"},next:{title:"d_FileExtension",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/languages/d_FileExtension"}},l={},c=[{value:"<code>LanguageNodes</code>",id:"languagenodes",level:2},{value:"Description:",id:"description",level:4},{value:"Attributes:",id:"attributes",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"languagenodes"},(0,a.kt)("inlineCode",{parentName:"h2"},"LanguageNodes")),(0,a.kt)("h4",{id:"description"},"Description:"),(0,a.kt)("p",null,"This class represents a collection of language nodes and provides functionalities for working with them."),(0,a.kt)("h4",{id:"attributes"},"Attributes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"py")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Tuple[Set[str], Set[str]]"),"): A tuple containing two sets of strings. The first set represents the available language nodes, while the second set represents the language nodes that are specifically related to function definitions. Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"(set(), set())"),".")),(0,a.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate instantiation of the class\npy_nodes = LanguageNodes.py\n# The rest of the example\n")),(0,a.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"LanguageNodes")," class is a collection of language nodes, which are represented by sets of strings. The ",(0,a.kt)("inlineCode",{parentName:"p"},"py")," attribute represents the language nodes for the Python language. The first set in the ",(0,a.kt)("inlineCode",{parentName:"p"},"py")," tuple contains all available language nodes, while the second set contains the language nodes specifically related to function definitions. The ",(0,a.kt)("inlineCode",{parentName:"p"},"py")," attribute can be accessed directly using ",(0,a.kt)("inlineCode",{parentName:"p"},"LanguageNodes.py"),"."),(0,a.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"This class does not have any dependencies.")))}d.isMDXComponent=!0}}]);