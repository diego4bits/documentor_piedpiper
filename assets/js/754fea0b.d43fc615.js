"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8152],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),c=d(n),f=o,m=c["".concat(s,".").concat(f)]||c[f]||u[f]||i;return n?r.createElement(m,a(a({ref:t},l),{},{components:n})):r.createElement(m,a({ref:t},l))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=f;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[c]="string"==typeof e?e:o,a[1]=p;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},771:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const i={},a=void 0,p={unversionedId:"docs/src/snippet_management/node_info/NodeInfo",id:"docs/src/snippet_management/node_info/NodeInfo",title:"NodeInfo",description:"NodeInfo",source:"@site/docs/docs/src/snippet_management/node_info/NodeInfo.md",sourceDirName:"docs/src/snippet_management/node_info",slug:"/docs/src/snippet_management/node_info/NodeInfo",permalink:"/documentor_piedpiper/docs/src/snippet_management/node_info/NodeInfo",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_children",permalink:"/documentor_piedpiper/docs/src/snippet_management/node_info/NodeInfo/d_children"},next:{title:"d_NodeInfo",permalink:"/documentor_piedpiper/docs/src/snippet_management/node_info/d_NodeInfo"}},s={},d=[{value:"<code>NodeInfo</code>",id:"nodeinfo",level:2},{value:"Description:",id:"description",level:4},{value:"Attributes:",id:"attributes",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],l={toc:d},c="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(c,(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"nodeinfo"},(0,o.kt)("inlineCode",{parentName:"h2"},"NodeInfo")),(0,o.kt)("h4",{id:"description"},"Description:"),(0,o.kt)("p",null,"This class represents information about a specific node in a tree. It provides functionalities for managing and accessing the properties of the node."),(0,o.kt)("h4",{id:"attributes"},"Attributes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node")," (",(0,o.kt)("inlineCode",{parentName:"li"},"Node"),"): Represents the actual node in the tree."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"parent_type")," (",(0,o.kt)("inlineCode",{parentName:"li"},"str"),"): Represents the type of the parent node."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"parent_identifier")," (",(0,o.kt)("inlineCode",{parentName:"li"},"str"),"): Represents the identifier of the parent node.")),(0,o.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Instantiating the class with the required arguments\nnode_info = NodeInfo(node, parent_type, parent_identifier)\n# The rest of the example\n")),(0,o.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"NodeInfo")," class is used to store and manage information about a specific node in a tree. The ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," attribute represents the actual node in the tree, while the ",(0,o.kt)("inlineCode",{parentName:"p"},"parent_type")," attribute represents the type of the parent node and the ",(0,o.kt)("inlineCode",{parentName:"p"},"parent_identifier")," attribute represents the identifier of the parent node. These attributes can be accessed and modified using the provided methods of the class."),(0,o.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Node")," from the ",(0,o.kt)("inlineCode",{parentName:"li"},"tree_sitter")," module: Represents a node in a tree.")))}u.isMDXComponent=!0}}]);