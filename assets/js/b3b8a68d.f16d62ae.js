"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4100],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),l=d(n),m=o,f=l["".concat(p,".").concat(m)]||l[m]||u[m]||i;return n?r.createElement(f,a(a({ref:t},c),{},{components:n})):r.createElement(f,a({ref:t},c))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[l]="string"==typeof e?e:o,a[1]=s;for(var d=2;d<i;d++)a[d]=n[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5811:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>d});var r=n(7462),o=(n(7294),n(3905));const i={},a=void 0,s={unversionedId:"docs/src/snippet_management/node_info/d_NodeInfo",id:"docs/src/snippet_management/node_info/d_NodeInfo",title:"d_NodeInfo",description:"NodeInfo",source:"@site/docs/docs/src/snippet_management/node_info/d_NodeInfo.md",sourceDirName:"docs/src/snippet_management/node_info",slug:"/docs/src/snippet_management/node_info/d_NodeInfo",permalink:"/documentor_piedpiper/docs/src/snippet_management/node_info/d_NodeInfo",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"NodeInfo",permalink:"/documentor_piedpiper/docs/src/snippet_management/node_info/NodeInfo"},next:{title:"d___init__",permalink:"/documentor_piedpiper/docs/src/snippet_management/snippet_extract/SnippetExtract/d___init__"}},p={},d=[{value:"<code>NodeInfo</code>",id:"nodeinfo",level:2},{value:"Description:",id:"description",level:4},{value:"Attributes:",id:"attributes",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:d},l="wrapper";function u(e){let{components:t,...n}=e;return(0,o.kt)(l,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"nodeinfo"},(0,o.kt)("inlineCode",{parentName:"h2"},"NodeInfo")),(0,o.kt)("h4",{id:"description"},"Description:"),(0,o.kt)("p",null,"This class represents information about a node in a tree structure. It provides functionalities for accessing and manipulating the properties of a node."),(0,o.kt)("h4",{id:"attributes"},"Attributes:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"node")," (",(0,o.kt)("inlineCode",{parentName:"li"},"Node"),"): The node object representing a specific entity or concept in the tree structure."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"parent_type")," (",(0,o.kt)("inlineCode",{parentName:"li"},"str"),"): The type of the parent node that contains the current node."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"parent_identifier")," (",(0,o.kt)("inlineCode",{parentName:"li"},"str"),"): The identifier of the parent node that contains the current node.")),(0,o.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case of instantiating and using the class\nnode = Node(...)\ninstance = NodeInfo(node, parent_type, parent_identifier)\n# The rest of the example\n")),(0,o.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,o.kt)("p",null,"This class is used to store information about a node in a tree structure. The ",(0,o.kt)("inlineCode",{parentName:"p"},"node")," attribute represents the actual node object in the tree. The ",(0,o.kt)("inlineCode",{parentName:"p"},"parent_type")," attribute stores the type of the parent node that contains the current node. The ",(0,o.kt)("inlineCode",{parentName:"p"},"parent_identifier")," attribute stores the identifier of the parent node that contains the current node. These attributes can be accessed and manipulated to perform operations on the node and its parent."),(0,o.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"Node")," from the ",(0,o.kt)("inlineCode",{parentName:"li"},"tree_sitter")," module: This class depends on the ",(0,o.kt)("inlineCode",{parentName:"li"},"Node")," class from the ",(0,o.kt)("inlineCode",{parentName:"li"},"tree_sitter")," module to represent the node object in the tree structure.")))}u.isMDXComponent=!0}}]);