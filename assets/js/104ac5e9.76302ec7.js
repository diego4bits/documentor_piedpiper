"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1631],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>m});var r=i(7294);function n(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function o(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,r)}return i}function a(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?o(Object(i),!0).forEach((function(t){n(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):o(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,r,n=function(e,t){if(null==e)return{};var i,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||(n[i]=e[i]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)i=o[r],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(n[i]=e[i])}return n}var l=r.createContext({}),d=function(e){var t=r.useContext(l),i=t;return e&&(i="function"==typeof e?e(t):a(a({},t),e)),i},c=function(e){var t=d(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var i=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),p=d(i),f=n,m=p["".concat(l,".").concat(f)]||p[f]||u[f]||o;return i?r.createElement(m,a(a({ref:t},c),{},{components:i})):r.createElement(m,a({ref:t},c))}));function m(e,t){var i=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=i.length,a=new Array(o);a[0]=f;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,a[1]=s;for(var d=2;d<o;d++)a[d]=i[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,i)}f.displayName="MDXCreateElement"},983:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>d});var r=i(7462),n=(i(7294),i(3905));const o={},a=void 0,s={unversionedId:"docs/src/tree_sitter_logic/tree_sitter_util/d_get_identifier",id:"docs/src/tree_sitter_logic/tree_sitter_util/d_get_identifier",title:"d_get_identifier",description:"get_identifier",source:"@site/docs/docs/src/tree_sitter_logic/tree_sitter_util/d_get_identifier.md",sourceDirName:"docs/src/tree_sitter_logic/tree_sitter_util",slug:"/docs/src/tree_sitter_logic/tree_sitter_util/d_get_identifier",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_identifier",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_get_dependencies",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_dependencies"},next:{title:"d_get_implementation",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_implementation"}},l={},d=[{value:"<code>get_identifier</code>",id:"get_identifier",level:2},{value:"Description:",id:"description",level:4},{value:"Important info:",id:"important-info",level:4},{value:"Usage :",id:"usage-",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:d},p="wrapper";function u(e){let{components:t,...i}=e;return(0,n.kt)(p,(0,r.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"get_identifier"},(0,n.kt)("inlineCode",{parentName:"h2"},"get_identifier")),(0,n.kt)("h4",{id:"description"},"Description:"),(0,n.kt)("p",null,"This code snippet is a function that takes a ",(0,n.kt)("inlineCode",{parentName:"p"},"Node")," object and a ",(0,n.kt)("inlineCode",{parentName:"p"},"file_str")," string as input and returns the identifier (a sequence of characters representing a name) found within the given ",(0,n.kt)("inlineCode",{parentName:"p"},"Node")," object in the ",(0,n.kt)("inlineCode",{parentName:"p"},"file_str"),". It is typically used to extract identifiers from abstract syntax trees (ASTs) generated by the Tree-sitter parser."),(0,n.kt)("h4",{id:"important-info"},"Important info:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This function assumes that the ",(0,n.kt)("inlineCode",{parentName:"li"},"Node")," object represents a valid AST node."),(0,n.kt)("li",{parentName:"ul"},"If no identifier is found within the ",(0,n.kt)("inlineCode",{parentName:"li"},"Node")," object, ",(0,n.kt)("inlineCode",{parentName:"li"},"None")," is returned.")),(0,n.kt)("h4",{id:"usage-"},"Usage :"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"This code snippet is used to extract identifiers from AST nodes."),(0,n.kt)("li",{parentName:"ul"},"It can be used to retrieve variable names, function names, or any other names defined within the code represented by the AST."),(0,n.kt)("li",{parentName:"ul"},"By extracting identifiers, this code snippet enables further analysis and manipulation of the codebase.")),(0,n.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,n.kt)("p",null,"The function iterates over the children of the given ",(0,n.kt)("inlineCode",{parentName:"p"},"Node"),' object. For each child, it checks if the type of the child is "identifier". If so, it returns the substring of ',(0,n.kt)("inlineCode",{parentName:"p"},"file_str")," that corresponds to the range of bytes covered by the child. This substring represents the identifier found within the ",(0,n.kt)("inlineCode",{parentName:"p"},"Node"),".\nIf no identifier is found in any of the children, ",(0,n.kt)("inlineCode",{parentName:"p"},"None")," is returned."),(0,n.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"Node")," (from tree_sitter): The ",(0,n.kt)("inlineCode",{parentName:"li"},"Node")," class is imported from the ",(0,n.kt)("inlineCode",{parentName:"li"},"tree_sitter")," module. It represents a node in the abstract syntax tree generated by the Tree-sitter parser."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"file_str")," (str): The ",(0,n.kt)("inlineCode",{parentName:"li"},"file_str")," string is passed as input to the function and represents the source code file or code snippet from which the AST was generated.")))}u.isMDXComponent=!0}}]);