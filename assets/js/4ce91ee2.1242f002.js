"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8924],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>g});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(i),u=a,g=d["".concat(s,".").concat(u)]||d[u]||m[u]||r;return i?n.createElement(g,l(l({ref:t},c),{},{components:i})):n.createElement(g,l({ref:t},c))}));function g(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=i[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}u.displayName="MDXCreateElement"},2090:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=i(7462),a=(i(7294),i(3905));const r={},l=void 0,o={unversionedId:"docs/src/git_tools/git_manager/GitManager/stage_file_list",id:"docs/src/git_tools/git_manager/GitManager/stage_file_list",title:"stage_file_list",description:"stagefilelist(files_paths: List[Path]) -> None",source:"@site/docs/docs/src/git_tools/git_manager/GitManager/stage_file_list.md",sourceDirName:"docs/src/git_tools/git_manager/GitManager",slug:"/docs/src/git_tools/git_manager/GitManager/stage_file_list",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/stage_file_list",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"stage_file",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/stage_file"},next:{title:"tail_commit",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/tail_commit"}},s={},p=[{value:"<code>stage_file_list(files_paths: List[Path]) -&gt; None</code>",id:"stage_file_listfiles_paths-listpath---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:p},d="wrapper";function m(e){let{components:t,...i}=e;return(0,a.kt)(d,(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"stage_file_listfiles_paths-listpath---none"},(0,a.kt)("inlineCode",{parentName:"h2"},"stage_file_list(files_paths: List[Path]) -> None")),(0,a.kt)("h4",{id:"description"},"Description:"),(0,a.kt)("p",null,"This method performs the staging of a list of files in a Git repository. It is used for adding files to the staging area before committing them. This method belongs to the class ",(0,a.kt)("inlineCode",{parentName:"p"},"GitManager"),"."),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"files_paths")," (",(0,a.kt)("inlineCode",{parentName:"li"},"List[Path]"),"): A list of file paths to be staged.")),(0,a.kt)("h4",{id:"returns"},"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"None"),": This method does not return any value.")),(0,a.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"None")),(0,a.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nfile_paths = [Path('/path/to/file1.txt'), Path('/path/to/file2.txt')]\nGitManager.stage_file_list(file_paths)\n")),(0,a.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,a.kt)("p",null,"The method ",(0,a.kt)("inlineCode",{parentName:"p"},"stage_file_list")," is a wrapper method that calls the private method ",(0,a.kt)("inlineCode",{parentName:"p"},"_stage_file_list")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"GitManager")," instance. The private method ",(0,a.kt)("inlineCode",{parentName:"p"},"_stage_file_list")," is responsible for the actual staging of the files in the Git repository."),(0,a.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GitManager"),": The class to which this method belongs."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List")," and ",(0,a.kt)("inlineCode",{parentName:"li"},"Path")," from ",(0,a.kt)("inlineCode",{parentName:"li"},"typing"),": The required types for the ",(0,a.kt)("inlineCode",{parentName:"li"},"files_paths")," parameter.")))}m.isMDXComponent=!0}}]);