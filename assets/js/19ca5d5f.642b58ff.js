"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6432],{3905:(e,r,t)=>{t.d(r,{Zo:()=>l,kt:()=>h});var i=t(7294);function s(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function n(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);r&&(i=i.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,i)}return t}function p(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?n(Object(t),!0).forEach((function(r){s(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):n(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function a(e,r){if(null==e)return{};var t,i,s=function(e,r){if(null==e)return{};var t,i,s={},n=Object.keys(e);for(i=0;i<n.length;i++)t=n[i],r.indexOf(t)>=0||(s[t]=e[t]);return s}(e,r);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)t=n[i],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var c=i.createContext({}),o=function(e){var r=i.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):p(p({},r),e)),t},l=function(e){var r=o(e.components);return i.createElement(c.Provider,{value:r},e.children)},d="mdxType",f={inlineCode:"code",wrapper:function(e){var r=e.children;return i.createElement(i.Fragment,{},r)}},u=i.forwardRef((function(e,r){var t=e.components,s=e.mdxType,n=e.originalType,c=e.parentName,l=a(e,["components","mdxType","originalType","parentName"]),d=o(t),u=s,h=d["".concat(c,".").concat(u)]||d[u]||f[u]||n;return t?i.createElement(h,p(p({ref:r},l),{},{components:t})):i.createElement(h,p({ref:r},l))}));function h(e,r){var t=arguments,s=r&&r.mdxType;if("string"==typeof e||s){var n=t.length,p=new Array(n);p[0]=u;var a={};for(var c in r)hasOwnProperty.call(r,c)&&(a[c]=r[c]);a.originalType=e,a[d]="string"==typeof e?e:s,p[1]=a;for(var o=2;o<n;o++)p[o]=t[o];return i.createElement.apply(null,p)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},3508:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>c,contentTitle:()=>p,default:()=>f,frontMatter:()=>n,metadata:()=>a,toc:()=>o});var i=t(7462),s=(t(7294),t(3905));const n={},p=void 0,a={unversionedId:"docs/src/repository_scrapping/file_scrapper/FileScrapper/d_scrape_specified",id:"docs/src/repository_scrapping/file_scrapper/FileScrapper/d_scrape_specified",title:"d_scrape_specified",description:"scrapespecified(specifiedfiles: List[Path]) -> bool",source:"@site/docs/docs/src/repository_scrapping/file_scrapper/FileScrapper/d_scrape_specified.md",sourceDirName:"docs/src/repository_scrapping/file_scrapper/FileScrapper",slug:"/docs/src/repository_scrapping/file_scrapper/FileScrapper/d_scrape_specified",permalink:"/documentor_piedpiper/docs/src/repository_scrapping/file_scrapper/FileScrapper/d_scrape_specified",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d__valid_file",permalink:"/documentor_piedpiper/docs/src/repository_scrapping/file_scrapper/FileScrapper/d__valid_file"},next:{title:"d_storage_dict",permalink:"/documentor_piedpiper/docs/src/repository_scrapping/file_scrapper/FileScrapper/d_storage_dict"}},c={},o=[{value:"<code>scrape_specified(specified_files: List[Path]) -&gt; bool</code>",id:"scrape_specifiedspecified_files-listpath---bool",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],l={toc:o},d="wrapper";function f(e){let{components:r,...t}=e;return(0,s.kt)(d,(0,i.Z)({},l,t,{components:r,mdxType:"MDXLayout"}),(0,s.kt)("h2",{id:"scrape_specifiedspecified_files-listpath---bool"},(0,s.kt)("inlineCode",{parentName:"h2"},"scrape_specified(specified_files: List[Path]) -> bool")),(0,s.kt)("h4",{id:"description"},"Description:"),(0,s.kt)("p",null,"This method performs the scraping of specified files and is used for scraping the contents of the specified files. This method belongs to the class FileScrapper."),(0,s.kt)("h4",{id:"parameters"},"Parameters:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"specified_files")," (",(0,s.kt)("inlineCode",{parentName:"li"},"List[Path]"),"): A list of file paths that need to be scraped.")),(0,s.kt)("h4",{id:"returns"},"Returns:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},(0,s.kt)("inlineCode",{parentName:"li"},"bool"),": Returns True indicating that the scraping process was successful.")),(0,s.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nfile_scrapper = FileScrapper()\nspecified_files = [Path('file1.txt'), Path('file2.txt')]\nresult = file_scrapper.scrape_specified(specified_files)\nprint(result)\n")),(0,s.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,s.kt)("p",null,"The method takes a list of specified file paths as input. It iterates through each file path in the list. For each file path, it checks if the file is valid using the ",(0,s.kt)("inlineCode",{parentName:"p"},"_valid_file")," method. If the file is valid, it starts the scraping process by calling the ",(0,s.kt)("inlineCode",{parentName:"p"},"_start_scrape")," method. After scraping all the specified files, it returns True indicating the successful completion of the scraping process."),(0,s.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,s.kt)("ul",null,(0,s.kt)("li",{parentName:"ul"},"This method does not have any dependencies.")))}f.isMDXComponent=!0}}]);