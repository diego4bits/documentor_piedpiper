"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9078],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>g});var i=n(7294);function p(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){p(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,p=function(e,t){if(null==e)return{};var n,i,p={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(p[n]=e[n]);return p}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(p[n]=e[n])}return p}var s=i.createContext({}),d=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(s.Provider,{value:t},e.children)},l="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},m=i.forwardRef((function(e,t){var n=e.components,p=e.mdxType,r=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),l=d(n),m=p,g=l["".concat(s,".").concat(m)]||l[m]||u[m]||r;return n?i.createElement(g,a(a({ref:t},c),{},{components:n})):i.createElement(g,a({ref:t},c))}));function g(e,t){var n=arguments,p=t&&t.mdxType;if("string"==typeof e||p){var r=n.length,a=new Array(r);a[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[l]="string"==typeof e?e:p,a[1]=o;for(var d=2;d<r;d++)a[d]=n[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2741:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>d});var i=n(7462),p=(n(7294),n(3905));const r={},a=void 0,o={unversionedId:"docs/src/snippet_management/snippet_storage/SnippetStorage/d_update_storage",id:"docs/src/snippet_management/snippet_storage/SnippetStorage/d_update_storage",title:"d_update_storage",description:"updatestorage(snippetsdict: Dict[int, CodeSnippet]) -> None",source:"@site/docs/docs/src/snippet_management/snippet_storage/SnippetStorage/d_update_storage.md",sourceDirName:"docs/src/snippet_management/snippet_storage/SnippetStorage",slug:"/docs/src/snippet_management/snippet_storage/SnippetStorage/d_update_storage",permalink:"/documentor_piedpiper/docs/src/snippet_management/snippet_storage/SnippetStorage/d_update_storage",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_update_code_snippet",permalink:"/documentor_piedpiper/docs/src/snippet_management/snippet_storage/SnippetStorage/d_update_code_snippet"},next:{title:"delete_code_snippet",permalink:"/documentor_piedpiper/docs/src/snippet_management/snippet_storage/SnippetStorage/delete_code_snippet"}},s={},d=[{value:"<code>update_storage(snippets_dict: Dict[int, CodeSnippet]) -&gt; None</code>",id:"update_storagesnippets_dict-dictint-codesnippet---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:d},l="wrapper";function u(e){let{components:t,...n}=e;return(0,p.kt)(l,(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,p.kt)("h2",{id:"update_storagesnippets_dict-dictint-codesnippet---none"},(0,p.kt)("inlineCode",{parentName:"h2"},"update_storage(snippets_dict: Dict[int, CodeSnippet]) -> None")),(0,p.kt)("h4",{id:"description"},"Description:"),(0,p.kt)("p",null,"This method performs the update of the snippet storage by replacing the existing snippets with the new ones provided in the ",(0,p.kt)("inlineCode",{parentName:"p"},"snippets_dict"),". This method belongs to the class ",(0,p.kt)("inlineCode",{parentName:"p"},"SnippetStorage"),"."),(0,p.kt)("h4",{id:"parameters"},"Parameters:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"snippets_dict")," (",(0,p.kt)("inlineCode",{parentName:"li"},"Dict[int, CodeSnippet]"),"): A dictionary containing the new snippets to be updated in the storage. The keys represent the snippet IDs and the values represent the corresponding ",(0,p.kt)("inlineCode",{parentName:"li"},"CodeSnippet")," objects.")),(0,p.kt)("h4",{id:"returns"},"Returns:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"None"),": This method does not return any value.")),(0,p.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,p.kt)("pre",null,(0,p.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nstorage = SnippetStorage()\nsnippets_dict = {\n    1: CodeSnippet('snippet1', 'code1'),\n    2: CodeSnippet('snippet2', 'code2'),\n    3: CodeSnippet('snippet3', 'code3')\n}\nstorage.update_storage(snippets_dict)\n")),(0,p.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,p.kt)("p",null,"The ",(0,p.kt)("inlineCode",{parentName:"p"},"update_storage")," method takes a dictionary ",(0,p.kt)("inlineCode",{parentName:"p"},"snippets_dict")," as input, which contains the new snippets to be updated in the storage. The method then updates the storage by replacing the existing snippets with the new ones provided in the ",(0,p.kt)("inlineCode",{parentName:"p"},"snippets_dict"),"."),(0,p.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,p.kt)("ul",null,(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"Dict")," from the ",(0,p.kt)("inlineCode",{parentName:"li"},"typing")," module: This dependency is used to define the type of the ",(0,p.kt)("inlineCode",{parentName:"li"},"snippets_dict")," parameter."),(0,p.kt)("li",{parentName:"ul"},(0,p.kt)("inlineCode",{parentName:"li"},"CodeSnippet")," from the ",(0,p.kt)("inlineCode",{parentName:"li"},"snippet_management.code_snippet")," module: This dependency is used to define the value type of the ",(0,p.kt)("inlineCode",{parentName:"li"},"snippets_dict")," dictionary. It represents a code snippet object with a name and code attributes.")))}u.isMDXComponent=!0}}]);