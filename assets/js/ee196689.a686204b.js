"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7894],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>_});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=r.createContext({}),l=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,p=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),c=l(n),u=i,_=c["".concat(p,".").concat(u)]||c[u]||m[u]||o;return n?r.createElement(_,s(s({ref:t},d),{},{components:n})):r.createElement(_,s({ref:t},d))}));function _(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=u;var a={};for(var p in t)hasOwnProperty.call(t,p)&&(a[p]=t[p]);a.originalType=e,a[c]="string"==typeof e?e:i,s[1]=a;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1680:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={},s=void 0,a={unversionedId:"docs/src/snippet_management/dependencies_info/DependenciesInfo/d__get_imports_string",id:"docs/src/snippet_management/dependencies_info/DependenciesInfo/d__get_imports_string",title:"d__get_imports_string",description:"getimportsstring(node str) -> str",source:"@site/docs/docs/src/snippet_management/dependencies_info/DependenciesInfo/d__get_imports_string.md",sourceDirName:"docs/src/snippet_management/dependencies_info/DependenciesInfo",slug:"/docs/src/snippet_management/dependencies_info/DependenciesInfo/d__get_imports_string",permalink:"/documentor_piedpiper/docs/src/snippet_management/dependencies_info/DependenciesInfo/d__get_imports_string",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d___init__",permalink:"/documentor_piedpiper/docs/src/snippet_management/dependencies_info/DependenciesInfo/d___init__"},next:{title:"DependenciesInfo",permalink:"/documentor_piedpiper/docs/src/snippet_management/dependencies_info/DependenciesInfo"}},p={},l=[{value:"<code>_get_imports_string(node: Node, file_str: str) -&gt; str</code>",id:"_get_imports_stringnode-node-file_str-str---str",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],d={toc:l},c="wrapper";function m(e){let{components:t,...n}=e;return(0,i.kt)(c,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"_get_imports_stringnode-node-file_str-str---str"},(0,i.kt)("inlineCode",{parentName:"h2"},"_get_imports_string(node: Node, file_str: str) -> str")),(0,i.kt)("h4",{id:"description"},"Description:"),(0,i.kt)("p",null,"This method retrieves the import statements from the given ",(0,i.kt)("inlineCode",{parentName:"p"},"node")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"file_str"),". It belongs to the class ",(0,i.kt)("inlineCode",{parentName:"p"},"DependenciesInfo")," and is used to get a string representation of the import statements."),(0,i.kt)("h4",{id:"parameters"},"Parameters:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"node")," (",(0,i.kt)("inlineCode",{parentName:"li"},"Node"),"): The node object representing the syntax tree of the file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"file_str")," (",(0,i.kt)("inlineCode",{parentName:"li"},"str"),"): The string representation of the file.")),(0,i.kt)("h4",{id:"returns"},"Returns:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"str"),": A string containing all the import statements found in the given ",(0,i.kt)("inlineCode",{parentName:"li"},"node")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"file_str"),".")),(0,i.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nresult_case1 = _get_imports_string(node, file_str)\nprint(result_case1)\n\n# Another use case (if applicable)\nresult_case2 = _get_imports_string(node, file_str)\nprint(result_case2)\n")),(0,i.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,i.kt)("p",null,"The method first calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"get_dependencies()")," function from the ",(0,i.kt)("inlineCode",{parentName:"p"},"tree_sitter_logic.tree_sitter_util")," module to retrieve all the dependency nodes from the given ",(0,i.kt)("inlineCode",{parentName:"p"},"node"),". Then, it iterates over each dependency node and calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"get_implementation()")," function from the same module to get the import statement for each dependency. The import statements are stored in a list. Finally, the method joins all the import statements in the list with a newline character and returns the resulting string."),(0,i.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tree_sitter_logic.tree_sitter_util.get_dependencies"),": This function is used to retrieve the dependency nodes from the given ",(0,i.kt)("inlineCode",{parentName:"li"},"node"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tree_sitter_logic.tree_sitter_util.get_implementation"),": This function is used to get the import statement for each dependency node.")))}m.isMDXComponent=!0}}]);