"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5005],{3905:(e,t,i)=>{i.d(t,{Zo:()=>d,kt:()=>u});var n=i(7294);function a(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function r(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?r(Object(i),!0).forEach((function(t){a(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):r(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,a=function(e,t){if(null==e)return{};var i,n,a={},r=Object.keys(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||(a[i]=e[i]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)i=r[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(a[i]=e[i])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var i=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),c=p(i),f=a,u=c["".concat(s,".").concat(f)]||c[f]||h[f]||r;return i?n.createElement(u,l(l({ref:t},d),{},{components:i})):n.createElement(u,l({ref:t},d))}));function u(e,t){var i=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=i.length,l=new Array(r);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:a,l[1]=o;for(var p=2;p<r;p++)l[p]=i[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}f.displayName="MDXCreateElement"},6791:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>p});var n=i(7462),a=(i(7294),i(3905));const r={},l=void 0,o={unversionedId:"docs/src/git_tools/git_file_paths/GitFilePaths/d__valid_file",id:"docs/src/git_tools/git_file_paths/GitFilePaths/d__valid_file",title:"d__valid_file",description:"validfile(sys_path: Path) -> bool",source:"@site/docs/docs/src/git_tools/git_file_paths/GitFilePaths/d__valid_file.md",sourceDirName:"docs/src/git_tools/git_file_paths/GitFilePaths",slug:"/docs/src/git_tools/git_file_paths/GitFilePaths/d__valid_file",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_paths/GitFilePaths/d__valid_file",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_GitFileChecker",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/d_GitFileChecker"},next:{title:"d_get_all_valid_paths",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_paths/GitFilePaths/d_get_all_valid_paths"}},s={},p=[{value:"<code>_valid_file(sys_path: Path) -&gt; bool</code>",id:"_valid_filesys_path-path---bool",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],d={toc:p},c="wrapper";function h(e){let{components:t,...i}=e;return(0,a.kt)(c,(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"_valid_filesys_path-path---bool"},(0,a.kt)("inlineCode",{parentName:"h2"},"_valid_file(sys_path: Path) -> bool")),(0,a.kt)("h4",{id:"description"},"Description:"),(0,a.kt)("p",null,"This method performs validation on a file path to determine if it is a valid file or not. It is used for filtering out certain file paths. This method belongs to the class ",(0,a.kt)("inlineCode",{parentName:"p"},"GitFilePaths"),"."),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"sys_path")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Path"),"): The file path to be validated.")),(0,a.kt)("h4",{id:"returns"},"Returns:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"bool"),": Returns ",(0,a.kt)("inlineCode",{parentName:"li"},"True")," if the file path is valid, ",(0,a.kt)("inlineCode",{parentName:"li"},"False")," otherwise.")),(0,a.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case\nresult_case1 = _valid_file(path)\nprint(result_case1)\n\n# Another use case (if applicable)\nresult_case2 = _valid_file(path)\nprint(result_case2)\n")),(0,a.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,a.kt)("p",null,"The method first splits the file path using the backslash character as a separator and stores the resulting parts in the ",(0,a.kt)("inlineCode",{parentName:"p"},"divide_path")," variable. "),(0,a.kt)("p",null,"It then applies several conditions to determine if the file path is valid or not. "),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"It checks if any part of the file path is present in the ",(0,a.kt)("inlineCode",{parentName:"p"},"doc_ignore")," list, which is a property of the ",(0,a.kt)("inlineCode",{parentName:"p"},"GitFilePaths")," class. If any part matches, the file path is considered invalid.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"It checks if the file extension (suffix) is present in the ",(0,a.kt)("inlineCode",{parentName:"p"},"doc_ignore")," list, except for cases where the suffix is empty. If the suffix matches and is not empty, the file path is considered invalid.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},'It checks if the file name is equal to ".docignore", ".git", ".gitignore", "doc.log", "documentor". If the file name matches, the file path is considered invalid.')),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},'It checks if the suffix is not equal to ".py" and the file is a regular file (not a directory). If both conditions are met, the file path is considered invalid.'))),(0,a.kt)("p",null,"If none of these conditions are met, the file path is considered valid."),(0,a.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GitManager"),': This dependency is imported from the "git_tools.git_manager" module. It is used for managing Git repositories.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DocIgnore"),': This dependency is imported from the "doc_ignore.doc_ignore" module. It is used for storing ignored file paths.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Path"),': This dependency is imported from the "pathlib" module. It is used for working with file paths.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Tree"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"GIT_OBJ_COMMIT"),': These dependencies are imported from the "pygit2" module. They are used for working with Git repositories and objects.'),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"List"),': This dependency is imported from the "typing" module. It is used for specifying the type of a list.')))}h.isMDXComponent=!0}}]);