"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5046],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),l=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=l(e.components);return o.createElement(s.Provider,{value:t},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=d(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return n?o.createElement(h,r(r({ref:t},c),{},{components:n})):o.createElement(h,r({ref:t},c))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,r=new Array(i);r[0]=m;var d={};for(var s in t)hasOwnProperty.call(t,s)&&(d[s]=t[s]);d.originalType=e,d[u]="string"==typeof e?e:a,r[1]=d;for(var l=2;l<i;l++)r[l]=n[l];return o.createElement.apply(null,r)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},6930:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var o=n(7462),a=(n(7294),n(3905));const i={},r=void 0,d={unversionedId:"docs/src/documentation_orchestrator/documentation_manager/DocumentationManager/d__run_diagnosis",id:"docs/src/documentation_orchestrator/documentation_manager/DocumentationManager/d__run_diagnosis",title:"d__run_diagnosis",description:"rundiagnosis()",source:"@site/docs/docs/src/documentation_orchestrator/documentation_manager/DocumentationManager/d__run_diagnosis.md",sourceDirName:"docs/src/documentation_orchestrator/documentation_manager/DocumentationManager",slug:"/docs/src/documentation_orchestrator/documentation_manager/DocumentationManager/d__run_diagnosis",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/documentation_manager/DocumentationManager/d__run_diagnosis",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d___init__",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/documentation_manager/DocumentationManager/d___init__"},next:{title:"d__run_first_diagnosis",permalink:"/documentor_piedpiper/docs/src/documentation_orchestrator/documentation_manager/DocumentationManager/d__run_first_diagnosis"}},s={},l=[{value:"<code>_run_diagnosis()</code>",id:"_run_diagnosis",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:l},u="wrapper";function p(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"_run_diagnosis"},(0,a.kt)("inlineCode",{parentName:"h2"},"_run_diagnosis()")),(0,a.kt)("h4",{id:"description"},"Description:"),(0,a.kt)("p",null,"This method performs the diagnosis of the documentation and is used to update the documentation based on the changes made to the code. This method belongs to the class ",(0,a.kt)("inlineCode",{parentName:"p"},"DocumentationManager"),"."),(0,a.kt)("h4",{id:"parameters"},"Parameters:"),(0,a.kt)("p",null,"This method does not take any parameters."),(0,a.kt)("h4",{id:"returns"},"Returns:"),(0,a.kt)("p",null,"This method does not return any value."),(0,a.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,a.kt)("p",null,"This method does not throw any exceptions."),(0,a.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate the use of _run_diagnosis method\nDocumentationManager.instance._run_diagnosis()\n")),(0,a.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"_run_diagnosis")," method performs the following steps:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Updates the list of changed files using the ",(0,a.kt)("inlineCode",{parentName:"li"},"GitFileChecker.update_changed_files()")," method."),(0,a.kt)("li",{parentName:"ol"},"Checks for any newly added files using the ",(0,a.kt)("inlineCode",{parentName:"li"},"AddedFilesManager.check_added_files()")," method."),(0,a.kt)("li",{parentName:"ol"},"Checks for any modified files using the ",(0,a.kt)("inlineCode",{parentName:"li"},"ModifiedFilesManager.check_modified_files()")," method."),(0,a.kt)("li",{parentName:"ol"},"Updates the snippets in the documentation using the ",(0,a.kt)("inlineCode",{parentName:"li"},"_update_snippets_to_doc()")," method of ",(0,a.kt)("inlineCode",{parentName:"li"},"DocumentationManager.instance"),"."),(0,a.kt)("li",{parentName:"ol"},"Updates the snippets to be deleted in the documentation using the ",(0,a.kt)("inlineCode",{parentName:"li"},"_update_snippets_to_delete()")," method of ",(0,a.kt)("inlineCode",{parentName:"li"},"DocumentationManager.instance"),"."),(0,a.kt)("li",{parentName:"ol"},"Updates the files to be deleted in the documentation using the ",(0,a.kt)("inlineCode",{parentName:"li"},"_update_files_to_delete()")," method of ",(0,a.kt)("inlineCode",{parentName:"li"},"DocumentationManager.instance"),"."),(0,a.kt)("li",{parentName:"ol"},"Updates the documentation log using the ",(0,a.kt)("inlineCode",{parentName:"li"},"DocumentationManager.update_doc_log()")," method.")),(0,a.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"GitFileChecker"),": This dependency is used to check for changed files in the code."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"AddedFilesManager"),": This dependency is used to check for newly added files in the code."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"ModifiedFilesManager"),": This dependency is used to check for modified files in the code."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DocumentationManager.instance"),": This dependency is used to update the snippets and files in the documentation."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DocumentationManager.update_doc_log()"),": This dependency is used to update the documentation log.")))}p.isMDXComponent=!0}}]);