"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3745],{3905:(e,t,i)=>{i.d(t,{Zo:()=>c,kt:()=>h});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),d=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},c=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=d(i),f=r,h=p["".concat(s,".").concat(f)]||p[f]||m[f]||a;return i?n.createElement(h,l(l({ref:t},c),{},{components:i})):n.createElement(h,l({ref:t},c))}));function h(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,l=new Array(a);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<a;d++)l[d]=i[d];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}f.displayName="MDXCreateElement"},1318:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var n=i(7462),r=(i(7294),i(3905));const a={},l=void 0,o={unversionedId:"docs/src/git_tools/git_file_checker/d_GitFileChecker",id:"docs/src/git_tools/git_file_checker/d_GitFileChecker",title:"d_GitFileChecker",description:"GitFileChecker",source:"@site/docs/docs/src/git_tools/git_file_checker/d_GitFileChecker.md",sourceDirName:"docs/src/git_tools/git_file_checker",slug:"/docs/src/git_tools/git_file_checker/d_GitFileChecker",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/d_GitFileChecker",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"GitFileChecker",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/GitFileChecker"},next:{title:"d__valid_file",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_paths/GitFilePaths/d__valid_file"}},s={},d=[{value:"<code>GitFileChecker</code>",id:"gitfilechecker",level:2},{value:"Description:",id:"description",level:4},{value:"Attributes:",id:"attributes",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:d},p="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(p,(0,n.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"gitfilechecker"},(0,r.kt)("inlineCode",{parentName:"h2"},"GitFileChecker")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This class represents a Git file checker and provides functionalities for detecting added, modified, and deleted files in a Git repository."),(0,r.kt)("h4",{id:"attributes"},"Attributes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"added")," (",(0,r.kt)("inlineCode",{parentName:"li"},"List[Path]"),"): A list of ",(0,r.kt)("inlineCode",{parentName:"li"},"Path")," objects representing the added files in the Git repository. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"[]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modified")," (",(0,r.kt)("inlineCode",{parentName:"li"},"List[Path]"),"): A list of ",(0,r.kt)("inlineCode",{parentName:"li"},"Path")," objects representing the modified files in the Git repository. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"[]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deleted")," (",(0,r.kt)("inlineCode",{parentName:"li"},"List[Path]"),"): A list of ",(0,r.kt)("inlineCode",{parentName:"li"},"Path")," objects representing the deleted files in the Git repository. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"[]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"files_diff")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Diff"),"): The Git diff object containing the file changes. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"None"),".")),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case of instantiating and using the class\ninstance = GitFileChecker()\n# The rest of the example\n")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GitFileChecker")," class uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"GitManager")," class from the ",(0,r.kt)("inlineCode",{parentName:"p"},"git_tools.git_manager")," module to interact with a Git repository. It utilizes the ",(0,r.kt)("inlineCode",{parentName:"p"},"pygit2")," library to retrieve the diff information between commits."),(0,r.kt)("p",null,"The class provides methods to detect added, modified, and deleted files in the Git repository. The ",(0,r.kt)("inlineCode",{parentName:"p"},"added"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"modified"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"deleted")," attributes are lists that store the ",(0,r.kt)("inlineCode",{parentName:"p"},"Path")," objects representing the respective file changes."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"files_diff")," attribute holds the Git diff object, which contains information about the file changes in the repository."),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GitManager"),": Provides the necessary methods to interact with a Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pygit2"),": A Python library for interacting with Git repositories."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Diff"),": A class from the ",(0,r.kt)("inlineCode",{parentName:"li"},"pygit2")," library that represents the diff between two commits."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Commit"),": A class from the ",(0,r.kt)("inlineCode",{parentName:"li"},"pygit2")," library that represents a Git commit."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GIT_DELTA_ADDED"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"GIT_DELTA_MODIFIED"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"GIT_DELTA_DELETED"),": Constants from the ",(0,r.kt)("inlineCode",{parentName:"li"},"pygit2")," library representing different types of file changes in a diff."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Path"),": A class from the ",(0,r.kt)("inlineCode",{parentName:"li"},"pathlib")," module that represents a file or directory path in the file system.")))}m.isMDXComponent=!0}}]);