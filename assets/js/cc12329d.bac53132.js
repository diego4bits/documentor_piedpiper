"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2447],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function p(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),d=l(r),m=a,f=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return r?n.createElement(f,o(o({ref:t},c),{},{components:r})):n.createElement(f,o({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p[d]="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=r[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5432:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>p,toc:()=>l});var n=r(7462),a=(r(7294),r(3905));const i={},o=void 0,p={unversionedId:"docs/src/repository_scrapping/code_scrapper/CodeScrapper",id:"docs/src/repository_scrapping/code_scrapper/CodeScrapper",title:"CodeScrapper",description:"CodeScrapper",source:"@site/docs/docs/src/repository_scrapping/code_scrapper/CodeScrapper.md",sourceDirName:"docs/src/repository_scrapping/code_scrapper",slug:"/docs/src/repository_scrapping/code_scrapper/CodeScrapper",permalink:"/documentor_piedpiper/docs/src/repository_scrapping/code_scrapper/CodeScrapper",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"storage_dict",permalink:"/documentor_piedpiper/docs/src/repository_scrapping/code_scrapper/CodeScrapper/storage_dict"},next:{title:"scrape_specified",permalink:"/documentor_piedpiper/docs/src/repository_scrapping/file_scrapper/FileScrapper/scrape_specified"}},s={},l=[{value:"<code>CodeScrapper</code>",id:"codescrapper",level:2},{value:"Description:",id:"description",level:4},{value:"Attributes:",id:"attributes",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:l},d="wrapper";function u(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"codescrapper"},(0,a.kt)("inlineCode",{parentName:"h2"},"CodeScrapper")),(0,a.kt)("h4",{id:"description"},"Description:"),(0,a.kt)("p",null,"This class represents a code scrapper and provides functionalities for extracting code snippets from a given file."),(0,a.kt)("h4",{id:"attributes"},"Attributes:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_input_file")," (",(0,a.kt)("inlineCode",{parentName:"li"},"FileHandler"),"): A file handler object used to read the input file. Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_file_dependencies")," (",(0,a.kt)("inlineCode",{parentName:"li"},"DependenciesInfo"),"): A dependencies info object used to store information about the file's dependencies. Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_snippet_storage")," (",(0,a.kt)("inlineCode",{parentName:"li"},"SnippetStorage"),"): A snippet storage object used to store the extracted code snippets. Default: An empty ",(0,a.kt)("inlineCode",{parentName:"li"},"SnippetStorage")," object."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_parser")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Parser"),"): A tree-sitter parser object used to parse the code file. Default: A new ",(0,a.kt)("inlineCode",{parentName:"li"},"Parser")," object."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_relevant_nodes_names")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Set[str]"),"): A set of relevant node names used to determine the relevant nodes in the code file. Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_assignment_nodes_names")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Set[str]"),"): A set of assignment node names used to determine the assignment nodes in the code file. Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_ast_root")," (",(0,a.kt)("inlineCode",{parentName:"li"},"Node"),"): The root node of the abstract syntax tree (AST) generated by the parser. Default: ",(0,a.kt)("inlineCode",{parentName:"li"},"None"),".")),(0,a.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case of instantiating and using the class\nscraper = CodeScrapper()\n# The rest of the example\n")),(0,a.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"CodeScrapper")," class uses a file handler to read a code file and a tree-sitter parser to parse the code file into an abstract syntax tree (AST). It then extracts relevant code snippets from the AST and stores them in a ",(0,a.kt)("inlineCode",{parentName:"p"},"SnippetStorage")," object. The class also uses a ",(0,a.kt)("inlineCode",{parentName:"p"},"DependenciesInfo")," object to store information about the file's dependencies."),(0,a.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"FileHandler"),": A file handler module used to read the input file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"DependenciesInfo"),": A module used to store information about the file's dependencies."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"SnippetStorage"),": A class used to store the extracted code snippets."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Parser")," (from tree_sitter): A tree-sitter parser used to parse the code file."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Node")," (from tree_sitter): A class representing a node in the abstract syntax tree (AST).")))}u.isMDXComponent=!0}}]);