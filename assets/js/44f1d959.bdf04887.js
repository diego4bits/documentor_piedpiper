"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4632],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=r.createContext({}),l=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,d=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),p=l(n),f=i,m=p["".concat(d,".").concat(f)]||p[f]||u[f]||o;return n?r.createElement(m,s(s({ref:t},c),{},{components:n})):r.createElement(m,s({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=f;var a={};for(var d in t)hasOwnProperty.call(t,d)&&(a[d]=t[d]);a.originalType=e,a[p]="string"==typeof e?e:i,s[1]=a;for(var l=2;l<o;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},1843:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var r=n(7462),i=(n(7294),n(3905));const o={},s=void 0,a={unversionedId:"docs/src/tree_sitter_logic/tree_sitter_util/d_get_nodes",id:"docs/src/tree_sitter_logic/tree_sitter_util/d_get_nodes",title:"d_get_nodes",description:"get_nodes",source:"@site/docs/docs/src/tree_sitter_logic/tree_sitter_util/d_get_nodes.md",sourceDirName:"docs/src/tree_sitter_logic/tree_sitter_util",slug:"/docs/src/tree_sitter_logic/tree_sitter_util/d_get_nodes",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_nodes",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d_get_implementation",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_implementation"},next:{title:"d_get_specified_nodes",permalink:"/documentor_piedpiper/docs/src/tree_sitter_logic/tree_sitter_util/d_get_specified_nodes"}},d={},l=[{value:"<code>get_nodes</code>",id:"get_nodes",level:2},{value:"Description:",id:"description",level:4},{value:"Important info:",id:"important-info",level:4},{value:"Usage:",id:"usage",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],c={toc:l},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"get_nodes"},(0,i.kt)("inlineCode",{parentName:"h2"},"get_nodes")),(0,i.kt)("h4",{id:"description"},"Description:"),(0,i.kt)("p",null,"This code snippet is a function called ",(0,i.kt)("inlineCode",{parentName:"p"},"get_nodes"),". It takes a root node, a set of types, and a file string as input parameters. It returns a list of ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeInfo")," objects. This function is used to retrieve specific nodes from a tree and gather information about them."),(0,i.kt)("h4",{id:"important-info"},"Important info:"),(0,i.kt)("p",null,"This function relies on the ",(0,i.kt)("inlineCode",{parentName:"p"},"_recursive_get_nodes")," helper function to recursively traverse the tree and find the desired nodes."),(0,i.kt)("h4",{id:"usage"},"Usage:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"This code snippet is used to retrieve specific nodes from a tree."),(0,i.kt)("li",{parentName:"ul"},"This code snippet is used to gather information about the retrieved nodes.")),(0,i.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"get_nodes")," function first creates a ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeInfo")," object for the root node. It then calls the ",(0,i.kt)("inlineCode",{parentName:"p"},"_recursive_get_nodes")," function, passing in the root node info, the set of types, and the file string. The ",(0,i.kt)("inlineCode",{parentName:"p"},"_recursive_get_nodes")," function recursively traverses the tree, starting from the root node, and checks if each node's type matches any of the types in the set. If a match is found, a ",(0,i.kt)("inlineCode",{parentName:"p"},"NodeInfo")," object is created for that node and added to the list of retrieved nodes. Finally, the list of retrieved nodes is returned."),(0,i.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"NodeInfo"),": This is a class defined in the ",(0,i.kt)("inlineCode",{parentName:"li"},"node_info")," module. It is used to store information about each retrieved node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Node"),": This is a class imported from the ",(0,i.kt)("inlineCode",{parentName:"li"},"tree_sitter")," module. It represents a node in a tree."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"List"),": This is a class imported from the ",(0,i.kt)("inlineCode",{parentName:"li"},"typing")," module. It represents a list data structure."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Set"),": This is a class imported from the ",(0,i.kt)("inlineCode",{parentName:"li"},"typing")," module. It represents a set data structure.")))}u.isMDXComponent=!0}}]);