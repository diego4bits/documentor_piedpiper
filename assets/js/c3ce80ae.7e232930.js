"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[639],{3905:(e,t,i)=>{i.d(t,{Zo:()=>p,kt:()=>u});var n=i(7294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function l(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function o(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var s=n.createContext({}),c=function(e){var t=n.useContext(s),i=t;return e&&(i="function"==typeof e?e(t):l(l({},t),e)),i},p=function(e){var t=c(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(i),f=r,u=d["".concat(s,".").concat(f)]||d[f]||m[f]||a;return i?n.createElement(u,l(l({ref:t},p),{},{components:i})):n.createElement(u,l({ref:t},p))}));function u(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,l=new Array(a);l[0]=f;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<a;c++)l[c]=i[c];return n.createElement.apply(null,l)}return n.createElement.apply(null,i)}f.displayName="MDXCreateElement"},8686:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>c});var n=i(7462),r=(i(7294),i(3905));const a={},l=void 0,o={unversionedId:"docs/src/git_tools/git_file_checker/GitFileChecker",id:"docs/src/git_tools/git_file_checker/GitFileChecker",title:"GitFileChecker",description:"GitFileChecker",source:"@site/docs/docs/src/git_tools/git_file_checker/GitFileChecker.md",sourceDirName:"docs/src/git_tools/git_file_checker",slug:"/docs/src/git_tools/git_file_checker/GitFileChecker",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/GitFileChecker",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"update_changed_files",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/GitFileChecker/update_changed_files"},next:{title:"d_GitFileChecker",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/d_GitFileChecker"}},s={},c=[{value:"<code>GitFileChecker</code>",id:"gitfilechecker",level:2},{value:"Description:",id:"description",level:4},{value:"Attributes:",id:"attributes",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],p={toc:c},d="wrapper";function m(e){let{components:t,...i}=e;return(0,r.kt)(d,(0,n.Z)({},p,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"gitfilechecker"},(0,r.kt)("inlineCode",{parentName:"h2"},"GitFileChecker")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This class represents a Git file checker and provides functionalities for checking the status of files in a Git repository."),(0,r.kt)("h4",{id:"attributes"},"Attributes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"added")," (",(0,r.kt)("inlineCode",{parentName:"li"},"List[Path]"),"): A list of paths to files that have been added to the Git repository. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"[]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"modified")," (",(0,r.kt)("inlineCode",{parentName:"li"},"List[Path]"),"): A list of paths to files that have been modified in the Git repository. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"[]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"deleted")," (",(0,r.kt)("inlineCode",{parentName:"li"},"List[Path]"),"): A list of paths to files that have been deleted from the Git repository. Default: ",(0,r.kt)("inlineCode",{parentName:"li"},"[]"),"."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"files_diff")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Diff"),"): A Pygit2 Diff object representing the differences between two commits in the Git repository.")),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Sample code to demonstrate a common use case of instantiating and using the class\ninstance = GitFileChecker()\n# The rest of the example\n")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"GitFileChecker")," class uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"added"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"modified"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"deleted")," attributes to keep track of the files that have been added, modified, and deleted in a Git repository. The ",(0,r.kt)("inlineCode",{parentName:"p"},"files_diff")," attribute contains the differences between two commits in the repository, which is used to update the lists of added, modified, and deleted files."),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git_tools.git_manager.GitManager"),": This class is used to manage the Git repository and retrieve the differences between commits."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"metaclasses.no_instanciable_meta.NoInstanciable"),": This metaclass is used to make the ",(0,r.kt)("inlineCode",{parentName:"li"},"GitFileChecker")," class non-instantiable."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pygit2.Diff"),": This class is used to represent the differences between two commits in the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pygit2.Commit"),": This class is used to represent a commit in the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pygit2.GIT_DELTA_ADDED"),": A constant representing a file that has been added in the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pygit2.GIT_DELTA_MODIFIED"),": A constant representing a file that has been modified in the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pygit2.GIT_DELTA_DELETED"),": A constant representing a file that has been deleted from the Git repository."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"pathlib.Path"),": This class is used to represent file paths."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"typing.List"),": This class is used to represent a list of objects.")))}m.isMDXComponent=!0}}]);