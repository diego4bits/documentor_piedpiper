"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9330],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=i.createContext({}),m=function(e){var t=i.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=m(e.components);return i.createElement(c.Provider,{value:t},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),d=m(n),u=r,f=d["".concat(c,".").concat(u)]||d[u]||p[u]||o;return n?i.createElement(f,a(a({ref:t},l),{},{components:n})):i.createElement(f,a({ref:t},l))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var m=2;m<o;m++)a[m]=n[m];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7440:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>m});var i=n(7462),r=(n(7294),n(3905));const o={},a=void 0,s={unversionedId:"docs/src/git_tools/git_manager/GitManager/d__update_front_commit",id:"docs/src/git_tools/git_manager/GitManager/d__update_front_commit",title:"d__update_front_commit",description:"updatefrontcommit(frontcommit_hash: str) -> None",source:"@site/docs/docs/src/git_tools/git_manager/GitManager/d__update_front_commit.md",sourceDirName:"docs/src/git_tools/git_manager/GitManager",slug:"/docs/src/git_tools/git_manager/GitManager/d__update_front_commit",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/d__update_front_commit",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"d__stage_file_list",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/d__stage_file_list"},next:{title:"d__update_tail_commit",permalink:"/documentor_piedpiper/docs/src/git_tools/git_manager/GitManager/d__update_tail_commit"}},c={},m=[{value:"<code>_update_front_commit(front_commit_hash: str) -&gt; None</code>",id:"_update_front_commitfront_commit_hash-str---none",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Exceptions:",id:"exceptions",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],l={toc:m},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"_update_front_commitfront_commit_hash-str---none"},(0,r.kt)("inlineCode",{parentName:"h2"},"_update_front_commit(front_commit_hash: str) -> None")),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This method updates the front commit of the GitManager class with the commit specified by the given front_commit_hash. It checks if the new front commit is a descendant of the tail commit, and if so, updates the front commit and its associated tree. If the new front commit is not a descendant of the tail commit, an exception is raised. This method belongs to the class GitManager."),(0,r.kt)("h4",{id:"parameters"},"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"front_commit_hash")," (",(0,r.kt)("inlineCode",{parentName:"li"},"str"),"): The hash of the commit that will become the new front commit.")),(0,r.kt)("h4",{id:"returns"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"None"),": This method does not return any value.")),(0,r.kt)("h4",{id:"exceptions"},"Exceptions:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Exception"),": This exception is raised if the front commit cannot be previous to the tail commit.")),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Update the front commit with the commit specified by the hash\ngit_manager_instance._update_front_commit(front_commit_hash)\n")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("p",null,"First, the method retrieves the commit with the specified front_commit_hash from the project repository. It then checks if this commit is a descendant of the tail commit using the ",(0,r.kt)("inlineCode",{parentName:"p"},"descendant_of()")," method. If it is, the front commit and its associated tree are updated. If it is not, an exception is raised indicating that the front commit cannot be previous to the tail commit."),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"self.project_repo"),": The Git repository object that contains the commits and trees."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"self.tail_commit"),": The tail commit of the GitManager instance.")))}p.isMDXComponent=!0}}]);