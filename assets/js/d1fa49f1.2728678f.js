"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4153],{3905:(e,t,a)=>{a.d(t,{Zo:()=>h,kt:()=>m});var i=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,i,r=function(e,t){if(null==e)return{};var a,i,r={},n=Object.keys(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=i.createContext({}),p=function(e){var t=i.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},h=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,s=e.parentName,h=o(e,["components","mdxType","originalType","parentName"]),c=p(a),u=r,m=c["".concat(s,".").concat(u)]||c[u]||d[u]||n;return a?i.createElement(m,l(l({ref:t},h),{},{components:a})):i.createElement(m,l({ref:t},h))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,l=new Array(n);l[0]=u;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[c]="string"==typeof e?e:r,l[1]=o;for(var p=2;p<n;p++)l[p]=a[p];return i.createElement.apply(null,l)}return i.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3147:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>d,frontMatter:()=>n,metadata:()=>o,toc:()=>p});var i=a(7462),r=(a(7294),a(3905));const n={},l=void 0,o={unversionedId:"docs/src/git_tools/git_file_paths/GitFilePaths/get_all_valid_paths",id:"docs/src/git_tools/git_file_paths/GitFilePaths/get_all_valid_paths",title:"get_all_valid_paths",description:'getallvalidpaths(gittree Path = Path(".")) -> List[Path]',source:"@site/docs/docs/src/git_tools/git_file_paths/GitFilePaths/get_all_valid_paths.md",sourceDirName:"docs/src/git_tools/git_file_paths/GitFilePaths",slug:"/docs/src/git_tools/git_file_paths/GitFilePaths/get_all_valid_paths",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_paths/GitFilePaths/get_all_valid_paths",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"defaultSidebar",previous:{title:"GitFileChecker",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_checker/GitFileChecker"},next:{title:"GitFilePaths",permalink:"/documentor_piedpiper/docs/src/git_tools/git_file_paths/GitFilePaths"}},s={},p=[{value:"<code>get_all_valid_paths(git_tree: Tree = None, parent_path: Path = Path(&quot;.&quot;)) -&gt; List[Path]</code>",id:"get_all_valid_pathsgit_tree-tree--none-parent_path-path--path---listpath",level:2},{value:"Description:",id:"description",level:4},{value:"Parameters:",id:"parameters",level:4},{value:"Returns:",id:"returns",level:4},{value:"Usage Cases:",id:"usage-cases",level:4},{value:"How it Works:",id:"how-it-works",level:4},{value:"Dependencies:",id:"dependencies",level:4}],h={toc:p},c="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(c,(0,i.Z)({},h,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"get_all_valid_pathsgit_tree-tree--none-parent_path-path--path---listpath"},(0,r.kt)("inlineCode",{parentName:"h2"},'get_all_valid_paths(git_tree: Tree = None, parent_path: Path = Path(".")) -> List[Path]')),(0,r.kt)("h4",{id:"description"},"Description:"),(0,r.kt)("p",null,"This method performs the process of retrieving all valid file paths within a given git tree or the current commit tree. It belongs to the class ",(0,r.kt)("inlineCode",{parentName:"p"},"GitFilePaths")," and is used to obtain a list of valid file paths."),(0,r.kt)("h4",{id:"parameters"},"Parameters:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"git_tree")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Tree"),", optional): The git tree from which to retrieve the file paths. If not provided, the method will select the front commit and use its tree."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"parent_path")," (",(0,r.kt)("inlineCode",{parentName:"li"},"Path"),", optional): The parent path to append to each file path. Defaults to the current working directory.")),(0,r.kt)("h4",{id:"returns"},"Returns:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"List[Path]"),": A list of valid file paths within the given git tree or commit tree.")),(0,r.kt)("h4",{id:"usage-cases"},"Usage Cases:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"# Retrieve all valid file paths using the current commit tree and the current working directory as the parent path\nresult_case1 = get_all_valid_paths()\nprint(result_case1)\n\n# Retrieve all valid file paths using a specific git tree and a custom parent path\nresult_case2 = get_all_valid_paths(git_tree=my_git_tree, parent_path=my_parent_path)\nprint(result_case2)\n")),(0,r.kt)("h4",{id:"how-it-works"},"How it Works:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"git_tree")," is not provided, the method selects the front commit and uses its tree."),(0,r.kt)("li",{parentName:"ol"},"Iterate over each entry in the git tree."),(0,r.kt)("li",{parentName:"ol"},"Create the full path by appending the entry name to the parent path."),(0,r.kt)("li",{parentName:"ol"},"Check various conditions to determine if the path is valid:",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"If the full path does not exist, skip the entry."),(0,r.kt)("li",{parentName:"ul"},"If the entry type is a commit, skip the entry."),(0,r.kt)("li",{parentName:"ul"},"If the full path is not a valid file, skip the entry."))),(0,r.kt)("li",{parentName:"ol"},"If the full path is a file, append it to the list of paths."),(0,r.kt)("li",{parentName:"ol"},"If the full path is a directory, recursively call ",(0,r.kt)("inlineCode",{parentName:"li"},"get_all_valid_paths")," with the corresponding tree and parent path, and append the resulting paths to the list."),(0,r.kt)("li",{parentName:"ol"},"Return the list of valid file paths.")),(0,r.kt)("h4",{id:"dependencies"},"Dependencies:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"GitManager"),": Used to select the front commit and retrieve the commit tree."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Path"),": Used to represent file paths."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Tree"),": Used to represent the git tree."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"List"),": Used to represent a list of file paths.")))}d.isMDXComponent=!0}}]);